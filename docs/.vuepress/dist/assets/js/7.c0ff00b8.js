(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{168:function(_,v,t){_.exports=t.p+"assets/img/1566801591177.42aa5f75.png"},169:function(_,v,t){_.exports=t.p+"assets/img/1566801616951.15bb8324.png"},170:function(_,v,t){_.exports=t.p+"assets/img/1566801924569.a365a66a.png"},171:function(_,v,t){_.exports=t.p+"assets/img/1566802213086.dda81f20.png"},172:function(_,v,t){_.exports=t.p+"assets/img/1566802329847.305fa1d2.png"},173:function(_,v,t){_.exports=t.p+"assets/img/1566802427107.9699341c.png"},174:function(_,v,t){_.exports=t.p+"assets/img/1566802508743.4240da4f.png"},175:function(_,v,t){_.exports=t.p+"assets/img/1566802571039.0c8ee2bc.png"},176:function(_,v,t){_.exports=t.p+"assets/img/1566802622096.d074e483.png"},177:function(_,v,t){_.exports=t.p+"assets/img/1566802725999.716187f0.png"},178:function(_,v,t){_.exports=t.p+"assets/img/1566803033043.586396cc.png"},179:function(_,v,t){_.exports=t.p+"assets/img/1566803126318.01c6ef97.png"},180:function(_,v,t){_.exports=t.p+"assets/img/1566803183683.112d609b.png"},181:function(_,v,t){_.exports=t.p+"assets/img/1566803228246.b225ed69.png"},182:function(_,v,t){_.exports=t.p+"assets/img/1566803281222.cef5a9e1.png"},558:function(_,v,t){"use strict";t.r(v);var a=[function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("div",{staticClass:"content"},[a("p",[_._v("以下转载自公众号：code秘密花园，作者 ConardLi")]),_._v(" "),a("h2",{attrs:{id:"四、时间复杂度和空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、时间复杂度和空间复杂度","aria-hidden":"true"}},[_._v("#")]),_._v(" 四、时间复杂度和空间复杂度")]),_._v(" "),a("p",[_._v("在开始学习之前，我们首先要搞懂时间复杂度和空间复杂度的概念，它们的高低共同决定着一段代码质量的好坏：")]),_._v(" "),a("h3",{attrs:{id:"_4-1-时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-时间复杂度","aria-hidden":"true"}},[_._v("#")]),_._v(" 4.1 时间复杂度")]),_._v(" "),a("p",[_._v("一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度。")]),_._v(" "),a("p",[_._v("没有循环语句，记作 "),a("code",[_._v("O(1)")]),_._v("，也称为常数阶。只有一重循环，则算法的基本操作的执行频度与问题规模n呈线性增大关系，记作 "),a("code",[_._v("O（n）")]),_._v("，也叫线性阶。")]),_._v(" "),a("p",[_._v("常见的时间复杂度有：")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("O(1)")]),_._v(": Constant Complexity: Constant 常数复杂度")]),_._v(" "),a("li",[a("code",[_._v("O(log n)")]),_._v(": Logarithmic Complexity: 对数复杂度")]),_._v(" "),a("li",[a("code",[_._v("O(n)")]),_._v(": Linear Complexity: 线性时间复杂度")]),_._v(" "),a("li",[a("code",[_._v("O(n^2)")]),_._v(": N square Complexity 平⽅方")]),_._v(" "),a("li",[a("code",[_._v("O(n^3)")]),_._v(": N square Complexity ⽴立⽅方")]),_._v(" "),a("li",[a("code",[_._v("O(2^n)")]),_._v(": Exponential Growth 指数")]),_._v(" "),a("li",[a("code",[_._v("O(n!)")]),_._v(": Factorial 阶乘")])]),_._v(" "),a("p",[a("img",{attrs:{src:t(168),alt:"1566801591177"}})]),_._v(" "),a("h3",{attrs:{id:"_4-2-空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-空间复杂度","aria-hidden":"true"}},[_._v("#")]),_._v(" 4.2 空间复杂度")]),_._v(" "),a("p",[_._v("一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。")]),_._v(" "),a("p",[_._v("一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。")]),_._v(" "),a("h2",{attrs:{id:"五、数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、数据结构","aria-hidden":"true"}},[_._v("#")]),_._v(" 五、数据结构")]),_._v(" "),a("p",[_._v("数据结构这个词相信大家都不陌生，在很多场景下可能都听过，但你有没有考虑过“数据结构”究竟是一个什么东西呢？")]),_._v(" "),a("blockquote",[a("p",[_._v("数据结构即数据元素相互之间存在的一种和多种特定的关系集合。")])]),_._v(" "),a("p",[_._v("一般你可以从两个维度来理解它，逻辑结构和存储结构。")]),_._v(" "),a("h3",{attrs:{id:"_5-1-逻辑结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-逻辑结构","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.1 逻辑结构")]),_._v(" "),a("p",[a("img",{attrs:{src:t(169),alt:"1566801616951"}})]),_._v(" "),a("p",[_._v("简单的来说逻辑结构就是数据之间的关系，逻辑结构大概统一的可以分成两种：线性结构、非线性结构。")]),_._v(" "),a("p",[_._v("😋线性结构："),a("strong",[_._v("是一个有序数据元素的集合。其中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的。")])]),_._v(" "),a("p",[_._v("常用的线性结构有: 栈，队列，链表，线性表。")]),_._v(" "),a("p",[_._v("😋非线性结构："),a("strong",[_._v("各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系。")])]),_._v(" "),a("p",[_._v("常见的非线性结构有 二维数组，树等。")]),_._v(" "),a("h3",{attrs:{id:"_5-2-存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-存储结构","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.2 存储结构")]),_._v(" "),a("p",[a("strong",[_._v("逻辑结构指的是数据间的关系，而存储结构是逻辑结构用计算机语言的实现")]),_._v("。常见的存储结构有顺序存储、链式存储、索引存储以及散列存储。")]),_._v(" "),a("p",[_._v("例如：数组在内存中的位置是连续的，它就属于顺序存储；链表是主动建立数据间的关联关系的，在内存中却不一定是连续的，它属于链式存储；还有顺序和逻辑上都不存在顺序关系，但是你可以通过一定的方式去访问它的哈希表，数据散列存储。")]),_._v(" "),a("h3",{attrs:{id:"_5-3-数据结构-二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-数据结构-二叉树","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.3 数据结构-二叉树")]),_._v(" "),a("p",[_._v("树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。")]),_._v(" "),a("blockquote",[a("p",[_._v("二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。")])]),_._v(" "),a("p",[a("img",{attrs:{src:t(170),alt:"1566801924569"}})]),_._v(" "),a("h4",{attrs:{id:"_5-3-1-二叉树遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-二叉树遍历","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.3.1 二叉树遍历")]),_._v(" "),a("blockquote",[a("p",[_._v("重点中的重点，最好同时掌握递归和非递归版本，递归版本很容易书写，但是真正考察基本功的是非递归版本。")])]),_._v(" "),a("ul",[a("li",[_._v("二叉树的中序遍历")]),_._v(" "),a("li",[_._v("二叉树的前序遍历")]),_._v(" "),a("li",[_._v("二叉树的后序遍历")])]),_._v(" "),a("blockquote",[a("p",[_._v("根据前序遍历和中序遍历的特点重建二叉树，逆向思维，很有意思的题目")])]),_._v(" "),a("ul",[a("li",[_._v("重建二叉树")]),_._v(" "),a("li",[_._v("求二叉树的遍历")])]),_._v(" "),a("h4",{attrs:{id:"_5-3-2-二叉树的对称性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-二叉树的对称性","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.3.2 二叉树的对称性")]),_._v(" "),a("ul",[a("li",[_._v("对称的二叉树")]),_._v(" "),a("li",[_._v("二叉树的镜像")])]),_._v(" "),a("h4",{attrs:{id:"_5-3-3-二叉搜索树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-3-二叉搜索树","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.3.3 二叉搜索树")]),_._v(" "),a("blockquote",[a("p",[_._v("二叉搜索树是特殊的二叉树，考察二叉搜索树的题目一般都是考察二叉搜索树的特性，所以掌握好它的特性很重要。")])]),_._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[_._v("特性")]),_._v(" "),a("ol",[a("li",[_._v("若任意节点的左⼦子树不不空，则左子树上所有结点的值均小于它的 根结点的值;")]),_._v(" "),a("li",[_._v("若任意节点的右⼦子树不不空，则右子树上所有结点的值均大于它的 根结点的值;")]),_._v(" "),a("li",[_._v("任意节点的左、右子树也分别为二叉查找树。")])])]),_._v(" "),a("ul",[a("li",[_._v("二叉搜索树的第k个节点")]),_._v(" "),a("li",[_._v("二叉搜索树的后序遍历")])]),_._v(" "),a("h4",{attrs:{id:"_5-3-4-二叉树的深度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-4-二叉树的深度","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.3.4 二叉树的深度")]),_._v(" "),a("blockquote",[a("p",[_._v("二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。")]),_._v(" "),a("p",[_._v("平衡二叉树：左右子树深度之差大于1")])]),_._v(" "),a("ul",[a("li",[_._v("二叉树的最大深度")]),_._v(" "),a("li",[_._v("二叉树的最小深度")]),_._v(" "),a("li",[_._v("平衡二叉树")])]),_._v(" "),a("h3",{attrs:{id:"_5-4-数据结构-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-数据结构-链表","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.4 数据结构-链表")]),_._v(" "),a("p",[_._v("用一组任意存储的单元来存储线性表的数据元素。一个对象存储着本身的值和下一个元素的地址。")]),_._v(" "),a("ul",[a("li",[_._v("需要遍历才能查询到元素，查询慢。")]),_._v(" "),a("li",[_._v("插入元素只需断开连接重新赋值，插入快。")])]),_._v(" "),a("p",[a("img",{attrs:{src:t(171),alt:"1566802213086"}})]),_._v(" "),a("p",[_._v("链表在开发中也是经常用到的数据结构， "),a("code",[_._v("React16")]),_._v("的 "),a("code",[_._v("FiberNode")]),_._v("连接起来形成的 "),a("code",[_._v("FiberTree")]),_._v(", 就是个单链表结构。")]),_._v(" "),a("h4",{attrs:{id:"_5-4-1-基本应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-基本应用","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.4.1 基本应用")]),_._v(" "),a("blockquote",[a("p",[_._v("主要是对链表基本概念和特性的应用，如果基础概念掌握牢靠，此类问题即可迎刃而解")])]),_._v(" "),a("ul",[a("li",[_._v("从尾到头打印链表")]),_._v(" "),a("li",[_._v("删除链表中的节点")]),_._v(" "),a("li",[_._v("反转链表")]),_._v(" "),a("li",[_._v("复杂链表的复制")])]),_._v(" "),a("h4",{attrs:{id:"_5-4-2-环类题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-2-环类题目","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.4.2 环类题目")]),_._v(" "),a("blockquote",[a("p",[_._v("环类题目即从判断一个单链表是否存在循环而扩展衍生的问题")])]),_._v(" "),a("ul",[a("li",[_._v("环形链表")]),_._v(" "),a("li",[_._v("链表环的入口节点")]),_._v(" "),a("li",[_._v("约瑟夫环")])]),_._v(" "),a("h4",{attrs:{id:"_5-4-3-双指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-3-双指针","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.4.3 双指针")]),_._v(" "),a("blockquote",[a("p",[_._v("双指针的思想在链表和数组中的题目都经常会用到，主要是利用两个或多个不同位置的指针，通过速度和方向的变换解决问题。")])]),_._v(" "),a("ul",[a("li",[_._v("两个指针从不同位置出发：一个从始端开始，另一个从末端开始；")]),_._v(" "),a("li",[_._v("两个指针以不同速度移动：一个指针快一些，另一个指针慢一些。")])]),_._v(" "),a("p",[_._v("对于单链表，因为我们只能在一个方向上遍历链表，所以第一种情景可能无法工作。然而，第二种情景，也被称为慢指针和快指针技巧，是非常有用的。")]),_._v(" "),a("ul",[a("li",[_._v("两个链表的公共节点")]),_._v(" "),a("li",[_._v("链表倒数第k个节点")]),_._v(" "),a("li",[_._v("相交链表")])]),_._v(" "),a("h4",{attrs:{id:"_5-4-4-双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-4-双向链表","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.4.4 双向链表")]),_._v(" "),a("p",[_._v("双链还有一个引用字段，称为 "),a("code",[_._v("prev")]),_._v("字段。有了这个额外的字段，您就能够知道当前结点的前一个结点。")]),_._v(" "),a("ul",[a("li",[_._v("扁平化多级双向链表")])]),_._v(" "),a("h3",{attrs:{id:"_5-5-数据结构-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-数据结构-数组","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.5 数据结构-数组")]),_._v(" "),a("p",[_._v("数组是我们在开发中最常见到的数据结构了，用于按顺序存储元素的集合。但是元素可以随机存取，因为数组中的每个元素都可以通过数组索引来识别。插入和删除时要移动后续元素，还要考虑扩容问题，插入慢。")]),_._v(" "),a("p",[_._v("数组与日常的业务开发联系非常紧密，如何巧妙的用好数组是我们能否开发出高质量代码的关键。")]),_._v(" "),a("h4",{attrs:{id:"_5-5-1-双指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-1-双指针","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.5.1 双指针")]),_._v(" "),a("blockquote",[a("p",[_._v("上面链表中提到的一类题目，主要是利用两个或多个不同位置的指针，通过速度和方向的变换解决问题。注意这种技巧经常在排序数组中使用。")])]),_._v(" "),a("ul",[a("li",[_._v("调整数组顺序使奇数位于偶数前面")]),_._v(" "),a("li",[_._v("和为S的两个数字")]),_._v(" "),a("li",[_._v("和为S的连续正整数序列")])]),_._v(" "),a("h4",{attrs:{id:"_5-5-2-n数之和问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-2-n数之和问题","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.5.2 N数之和问题")]),_._v(" "),a("blockquote",[a("p",[_._v("非常常见的问题，基本上都是一个套路，主要考虑如何比暴力法降低时间复杂度，而且也会用到上面的双指针技巧")])]),_._v(" "),a("ul",[a("li",[_._v("两数之和")]),_._v(" "),a("li",[_._v("三数之和")]),_._v(" "),a("li",[_._v("四数之和")])]),_._v(" "),a("h4",{attrs:{id:"_5-5-3-二维数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-3-二维数组","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.5.3 二维数组")]),_._v(" "),a("blockquote",[a("p",[_._v("建立一定的抽象建模能力，将实际中的很多问题进行抽象")])]),_._v(" "),a("ul",[a("li",[_._v("构建乘积数组")]),_._v(" "),a("li",[_._v("顺时针打印矩阵")])]),_._v(" "),a("h4",{attrs:{id:"_5-5-4-数据统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-4-数据统计","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.5.4 数据统计")]),_._v(" "),a("blockquote",[a("p",[_._v("数组少不了的就是统计和计算，此类问题考察如何用更高效的方法对数组进行统计计算。")])]),_._v(" "),a("ul",[a("li",[_._v("数组中出现次数超过数组长度一半的数字")]),_._v(" "),a("li",[_._v("连续子数组的最大和")]),_._v(" "),a("li",[_._v("扑克牌顺子")]),_._v(" "),a("li",[_._v("第一个只出现一次的字符")])]),_._v(" "),a("h3",{attrs:{id:"_5-6-数据结构-栈和队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-数据结构-栈和队列","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.6 数据结构-栈和队列")]),_._v(" "),a("p",[_._v("在上面的数组中，我们可以通过索引随机访问元素，但是在某些情况下，我们可能要限制数据的访问顺序，于是有了两种限制访问顺序的数据结构：栈（后进先出）、队列（先进先出）")]),_._v(" "),a("p",[a("img",{attrs:{src:t(172),alt:"1566802329847"}})]),_._v(" "),a("ul",[a("li",[_._v("队列和栈的互相实现")]),_._v(" "),a("li",[_._v("包含min函数的栈")]),_._v(" "),a("li",[_._v("栈的压入弹出序列")]),_._v(" "),a("li",[_._v("滑动窗口最大值")]),_._v(" "),a("li",[_._v("接雨水")])]),_._v(" "),a("h3",{attrs:{id:"_5-7-数据结构-哈希表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-数据结构-哈希表","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.7 数据结构-哈希表")]),_._v(" "),a("p",[_._v("哈希的基本原理是将给定的键值转换为偏移地址来检索记录。")]),_._v(" "),a("p",[_._v("键转换为地址是通过一种关系（公式）来完成的，这就是哈希（散列）函数。")]),_._v(" "),a("p",[_._v("虽然哈希表是一种有效的搜索技术，但是它还有些缺点。两个不同的关键字，由于哈希函数值相同，因而被映射到同一表位置上。该现象称为冲突。发生冲突的两个关键字称为该哈希函数的同义词。")]),_._v(" "),a("p",[a("img",{attrs:{src:t(173),alt:"1566802427107"}})]),_._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[_._v("如何设计哈希函数以及如何避免冲突就是哈希表的常见问题。好的哈希函数的选择有两条标准：")]),_._v(" "),a("ul",[a("li",[_._v("1.简单并且能够快速计算")]),_._v(" "),a("li",[_._v("2.能够在址空间中获取键的均匀分布")])])]),_._v(" "),a("p",[_._v("例如下面的题目：")]),_._v(" "),a("ul",[a("li",[_._v("常数时间插入、删除和获取随机元素")])]),_._v(" "),a("blockquote",[a("p",[_._v("当用到哈希表时我们通常是要开辟一个额外空间来记录一些计算过的值，同时我们又要在下一次计算的过程中快速检索到它们，例如上面提到的两数之和、三数之和等都利用了这种思想。")])]),_._v(" "),a("ul",[a("li",[_._v("两数之和")]),_._v(" "),a("li",[_._v("三数之和")]),_._v(" "),a("li",[_._v("字符流中第一个不重复的字符")]),_._v(" "),a("li",[_._v("宝石与石头")])]),_._v(" "),a("h3",{attrs:{id:"_5-8-数据结构-堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-数据结构-堆","aria-hidden":"true"}},[_._v("#")]),_._v(" 5.8 数据结构-堆")]),_._v(" "),a("p",[a("img",{attrs:{src:t(174),alt:"1566802508743"}})]),_._v(" "),a("p",[_._v("堆的底层实际上是一棵完全二叉树，可以用数组实现")]),_._v(" "),a("ul",[a("li",[_._v("每个的节点元素值不小于其子节点 - 最大堆")]),_._v(" "),a("li",[_._v("每个的节点元素值不大于其子节点 - 最小堆")])]),_._v(" "),a("blockquote",[a("p",[_._v("堆在处理某些特殊场景时可以大大降低代码的时间复杂度，例如在庞大的数据中找到最大的几个数或者最小的几个数，可以借助堆来完成这个过程。")])]),_._v(" "),a("ul",[a("li",[_._v("堆的基本操作")]),_._v(" "),a("li",[_._v("数据流中的中位数")]),_._v(" "),a("li",[_._v("最小的k个数")])]),_._v(" "),a("h2",{attrs:{id:"六、算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、算法","aria-hidden":"true"}},[_._v("#")]),_._v(" 六、算法")]),_._v(" "),a("h3",{attrs:{id:"_6-1-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-排序","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.1 排序")]),_._v(" "),a("p",[_._v("排序或许是前端接触最多的算法了，很多人的算法之路是从一个冒泡排序开始的，排序的方法有非常多种，它们各自有各自的应用场景和优缺点，这里我推荐如下6种应用最多的排序方法，如果你有兴趣也可以研究下其他几种。")]),_._v(" "),a("ul",[a("li",[_._v("快速排序")])]),_._v(" "),a("blockquote",[a("p",[_._v("选择一个目标值，比目标值小的放左边，比目标值大的放右边，目标值的位置已排好，将左右两侧再进行快排。")])]),_._v(" "),a("ul",[a("li",[_._v("归并排序")])]),_._v(" "),a("blockquote",[a("p",[_._v("将大序列二分成小序列，将小序列排序后再将排序后的小序列归并成大序列。")])]),_._v(" "),a("ul",[a("li",[_._v("选择排序")])]),_._v(" "),a("blockquote",[a("p",[_._v("每次排序取一个最大或最小的数字放到前面的有序序列中。")])]),_._v(" "),a("ul",[a("li",[_._v("插入排序")])]),_._v(" "),a("blockquote",[a("p",[_._v("将左侧序列看成一个有序序列，每次将一个数字插入该有序序列。插入时，从有序序列最右侧开始比较，若比较的数较大，后移一位。")])]),_._v(" "),a("ul",[a("li",[_._v("冒泡排序")])]),_._v(" "),a("blockquote",[a("p",[_._v("循环数组，比较当前元素和下一个元素，如果当前元素比下一个元素大，向上冒泡。下一次循环继续上面的操作，不循环已经排序好的数。")])]),_._v(" "),a("ul",[a("li",[_._v("堆排序")])]),_._v(" "),a("blockquote",[a("p",[_._v("创建一个大顶堆，大顶堆的堆顶一定是最大的元素。交换第一个元素和最后一个元素，让剩余的元素继续调整为大顶堆。从后往前依次和第一个元素交换并重新构建，排序完成。")])]),_._v(" "),a("h3",{attrs:{id:"_6-2-二分查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-二分查找","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.2 二分查找")]),_._v(" "),a("p",[_._v("查找是计算机中最基本也是最有用的算法之一。它描述了在有序集合中搜索特定值的过程。")]),_._v(" "),a("p",[a("img",{attrs:{src:t(175),alt:"1566802571039"}})]),_._v(" "),a("p",[_._v("二分查找维护查找空间的左、右和中间指示符，并比较查找目标或将查找条件应用于集合的中间值；如果条件不满足或值不相等，则清除目标不可能存在的那一半，并在剩下的一半上继续查找，直到成功为止。如果查以空的一半结束，则无法满足条件，并且无法找到目标。")]),_._v(" "),a("ul",[a("li",[_._v("二维数组查找")]),_._v(" "),a("li",[_._v("旋转数组的最小数字")]),_._v(" "),a("li",[_._v("在排序数组中查找数字")]),_._v(" "),a("li",[_._v("x 的平方根")]),_._v(" "),a("li",[_._v("猜数字大小")])]),_._v(" "),a("h3",{attrs:{id:"_6-3-递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-递归","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.3 递归")]),_._v(" "),a("p",[_._v("递归是一种解决问题的有效方法，在递归过程中，函数将自身作为子例程调用。")]),_._v(" "),a("p",[a("img",{attrs:{src:t(176),alt:"1566802622096"}})]),_._v(" "),a("p",[_._v("你可能想知道如何实现调用自身的函数。诀窍在于，每当递归函数调用自身时，它都会将给定的问题拆解为子问题。递归调用继续进行，直到到子问题无需进一步递归就可以解决的地步。")]),_._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[_._v("为了确保递归函数不会导致无限循环，它应具有以下属性：")]),_._v(" "),a("ul",[a("li",[_._v("一个简单的基本案例 —— 能够不使用递归来产生答案的终止方案。")]),_._v(" "),a("li",[_._v("一组规则，也称作递推关系，可将所有其他情况拆分到基本案例。")])])]),_._v(" "),a("h4",{attrs:{id:"_6-3-1-重复计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-重复计算","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.3.1 重复计算")]),_._v(" "),a("p",[_._v("一些问题使用递归考虑，思路是非常清晰的，但是却不推荐使用递归，例如下面的几个问题：")]),_._v(" "),a("ul",[a("li",[_._v("斐波拉契数列")]),_._v(" "),a("li",[_._v("跳台阶")]),_._v(" "),a("li",[_._v("矩形覆盖")])]),_._v(" "),a("p",[_._v("这几个问题使用递归都有一个共同的缺点，那就是包含大量的重复计算，如果递归层次比较深的话，直接会导致JS进程崩溃。")]),_._v(" "),a("p",[a("img",{attrs:{src:t(177),alt:"1566802725999"}})]),_._v(" "),a("p",[_._v("你可以使用 "),a("code",[_._v("记忆化")]),_._v("的方法来避免重复计算，即开辟一个额外空间来存储已经计算过的值，但是这样又会浪费一定的内存空间。因此上面的问题一般会使用动态规划求解。")]),_._v(" "),a("blockquote",[a("p",[_._v("所以，在使用递归之前，一定要判断代码是否含有重复计算，如果有的话，不推荐使用递归。")])]),_._v(" "),a("p",[_._v("递归是一种思想，而非一个类型，很多经典算法都是以递归为基础，因此这里就不再给出更多问题。")]),_._v(" "),a("h3",{attrs:{id:"_6-4-广度优先搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-广度优先搜索","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.4 广度优先搜索")]),_._v(" "),a("p",[_._v("广度优先搜索（ "),a("code",[_._v("BFS")]),_._v("）是一种遍历或搜索数据结构（如树或图）的算法，也可以在更抽象的场景中使用。")]),_._v(" "),a("p",[a("strong",[_._v("它的特点是越是接近根结点的结点将越早地遍历。")])]),_._v(" "),a("p",[_._v("例如，我们可以使用 "),a("code",[_._v("BFS")]),_._v(" 找到从起始结点到目标结点的路径，特别是最短路径。")]),_._v(" "),a("p",[_._v("在 "),a("code",[_._v("BFS")]),_._v("中，结点的处理顺序与它们添加到队列的顺序是完全相同的顺序，即先进先出，所以广度优先搜索一般使用队列实现。")]),_._v(" "),a("ul",[a("li",[_._v("从上到下打印二叉树")]),_._v(" "),a("li",[_._v("单词接龙")]),_._v(" "),a("li",[_._v("员工的重要性")]),_._v(" "),a("li",[_._v("岛屿数量")])]),_._v(" "),a("h3",{attrs:{id:"_6-5-深度优先搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-深度优先搜索","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.5 深度优先搜索")]),_._v(" "),a("p",[_._v("和广度优先搜索一样，深度优先搜索（ "),a("code",[_._v("DFS")]),_._v("）是用于在树/图中遍历/搜索的一种重要算法。")]),_._v(" "),a("p",[_._v("与 "),a("code",[_._v("BFS")]),_._v(" 不同，更早访问的结点可能不是更靠近根结点的结点。因此，你在 "),a("code",[_._v("DFS")]),_._v(" 中找到的第一条路径可能不是最短路径。")]),_._v(" "),a("p",[a("img",{attrs:{src:t(178),alt:"1566803033043"}})]),_._v(" "),a("p",[_._v("在 "),a("code",[_._v("DFS")]),_._v("中，结点的处理顺序是完全相反的顺序，就像它们被添加到栈中一样，它是后进先出。所以深度优先搜索一般使用栈实现。")]),_._v(" "),a("ul",[a("li",[_._v("二叉树的中序遍历")]),_._v(" "),a("li",[_._v("二叉树的最大深度")]),_._v(" "),a("li",[_._v("路径总和")]),_._v(" "),a("li",[_._v("课程表")]),_._v(" "),a("li",[_._v("岛屿数量")])]),_._v(" "),a("h3",{attrs:{id:"_6-6-回溯算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-回溯算法","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.6 回溯算法")]),_._v(" "),a("p",[_._v("从解决问题每一步的所有可能选项里系统选择出一个可行的解决方案。")]),_._v(" "),a("p",[_._v("在某一步选择一个选项后，进入下一步，然后面临新的选项。重复选择，直至达到最终状态。")]),_._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[_._v("回溯法解决的问题的所有选项可以用树状结构表示。")]),_._v(" "),a("ul",[a("li",[_._v("在某一步有n个可能的选项，该步骤可看作树中一个节点。")]),_._v(" "),a("li",[_._v("节点每个选项看成节点连线，到达它的n个子节点。")]),_._v(" "),a("li",[_._v("叶节点对应终结状态。")]),_._v(" "),a("li",[_._v("叶节点满足约束条件，则为一个可行的解决方案。")]),_._v(" "),a("li",[_._v("叶节点不满足约束条件，回溯到上一个节点，并尝试其他叶子节点。")]),_._v(" "),a("li",[_._v("节点所有子节点均不满足条件，再回溯到上一个节点。")]),_._v(" "),a("li",[_._v("所有状态均不能满足条件，问题无解。")])])]),_._v(" "),a("p",[a("img",{attrs:{src:t(179),alt:"1566803126318"}})]),_._v(" "),a("p",[_._v("回溯算法适合由多个步骤组成的问题，并且每个步骤都有多个选项。")]),_._v(" "),a("ul",[a("li",[_._v("二叉树中和为某一值的路径")]),_._v(" "),a("li",[_._v("字符串的排列")]),_._v(" "),a("li",[_._v("和为sum的n个数")]),_._v(" "),a("li",[_._v("矩阵中的路径")]),_._v(" "),a("li",[_._v("机器人的运动范围")]),_._v(" "),a("li",[_._v("N皇后问题")])]),_._v(" "),a("h3",{attrs:{id:"_6-7-动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-动态规划","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.7 动态规划")]),_._v(" "),a("p",[_._v("动态规划往往是最能有效考察算法和设计能力的题目类型，面对这类题目最重要的是抓住问题的阶段，了解每个阶段的状态，从而分析阶段之间的关系转化。")]),_._v(" "),a("p",[_._v("适用于动态规划的问题，需要满足"),a("strong",[_._v("最优子结构和无后效性")]),_._v("，动态规划的求解过程，在于找到状态转移方程，进行自底向上的求解。")]),_._v(" "),a("p",[a("img",{attrs:{src:t(180),alt:"1566803183683"}})]),_._v(" "),a("p",[_._v("自底向上的求解，可以帮你省略大量的复杂计算，例如上面的斐波拉契数列，使用递归的话时间复杂度会呈指数型增长，而动态规划则让此算法的时间复杂度保持在 "),a("code",[_._v("O(n)")]),_._v("。")]),_._v(" "),a("h4",{attrs:{id:"_6-7-1-路径问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-1-路径问题","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.7.1 路径问题")]),_._v(" "),a("ul",[a("li",[_._v("最小路径和")]),_._v(" "),a("li",[_._v("不同路径")]),_._v(" "),a("li",[_._v("不同路径 II")]),_._v(" "),a("li",[_._v("形成字符串的最短路径")])]),_._v(" "),a("h4",{attrs:{id:"_6-7-2-买卖股票类问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-2-买卖股票类问题","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.7.2 买卖股票类问题")]),_._v(" "),a("ul",[a("li",[_._v("买卖股票的最佳时机")]),_._v(" "),a("li",[_._v("买卖股票的最佳时机 III")]),_._v(" "),a("li",[_._v("打家劫舍")]),_._v(" "),a("li",[_._v("打家劫舍 II")])]),_._v(" "),a("h4",{attrs:{id:"子序列问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子序列问题","aria-hidden":"true"}},[_._v("#")]),_._v(" 子序列问题")]),_._v(" "),a("ul",[a("li",[_._v("不同的子序列")]),_._v(" "),a("li",[_._v("乘积最大子序列")]),_._v(" "),a("li",[_._v("最长上升子序列")]),_._v(" "),a("li",[_._v("最长回文子序列")])]),_._v(" "),a("h3",{attrs:{id:"_6-8-贪心算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-贪心算法","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.8 贪心算法")]),_._v(" "),a("p",[_._v("贪心算法：对问题求解的时候，总是做出在当前看来是最好的做法。")]),_._v(" "),a("p",[a("strong",[_._v("适用贪心算法的场景：问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。这种子问题最优解成为最优子结构")])]),_._v(" "),a("p",[a("img",{attrs:{src:t(181),alt:"1566803228246"}})]),_._v(" "),a("h4",{attrs:{id:"_6-8-1-买卖股票类问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-1-买卖股票类问题","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.8.1 买卖股票类问题")]),_._v(" "),a("ul",[a("li",[_._v("买卖股票的最佳时机 II")]),_._v(" "),a("li",[_._v("买卖股票的最佳时机含手续费")])]),_._v(" "),a("h4",{attrs:{id:"_6-8-2-货币选择问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-2-货币选择问题","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.8.2 货币选择问题")]),_._v(" "),a("ul",[a("li",[_._v("零钱兑换")]),_._v(" "),a("li",[_._v("零钱兑换 II")])]),_._v(" "),a("h3",{attrs:{id:"_6-9-贪心算法、动态规划、回溯的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-贪心算法、动态规划、回溯的区别","aria-hidden":"true"}},[_._v("#")]),_._v(" 6.9 贪心算法、动态规划、回溯的区别")]),_._v(" "),a("p",[a("strong",[_._v("贪心算法与动态规划的不同在于它对每个子问题的解决方案都作出选择，不能回退，动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能，而回溯算法就是大量的重复计算来获得最优解。")])]),_._v(" "),a("p",[a("img",{attrs:{src:t(182),alt:"1566803281222"}})]),_._v(" "),a("p",[_._v("有很多算法题目都是可以用这三种思想同时解答的，但是总有一种最适合的解法，这就需要不断的练习和总结来进行深入的理解才能更好的选择解决办法。")]),_._v(" "),a("h2",{attrs:{id:"七、前端编码能力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、前端编码能力","aria-hidden":"true"}},[_._v("#")]),_._v(" 七、前端编码能力")]),_._v(" "),a("p",[_._v("这部分是与前端开发贴近最紧密的一部分了，在写业务代码的同时，我们也应该关心一些类库或框架的内部实现。")]),_._v(" "),a("p",[_._v("大多数情况下，我们在写业务的时候不需要手动实现这些轮子，但是它们非常考察一个前端程序员的编码功底，如果你有一定的算法和数据结构基础，很多源码看起来就非常简单。")]),_._v(" "),a("p",[_._v("下面我拣选了一些问题：")]),_._v(" "),a("ul",[a("li",[_._v("手动实现call、apply、bind")]),_._v(" "),a("li",[_._v("EventEmitter")]),_._v(" "),a("li",[_._v("防抖")]),_._v(" "),a("li",[_._v("节流")]),_._v(" "),a("li",[_._v("浅拷贝和深拷贝")]),_._v(" "),a("li",[_._v("数组去重、扁平、最值")]),_._v(" "),a("li",[_._v("数组乱序-洗牌算法")]),_._v(" "),a("li",[_._v("函数柯里化")]),_._v(" "),a("li",[_._v("手动实现JSONP")]),_._v(" "),a("li",[_._v("模拟实现promise")]),_._v(" "),a("li",[_._v("手动实现ES5继承")]),_._v(" "),a("li",[_._v("手动实现instanceof")])])])}],i=t(0),r=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},a,!1,null,null,null);v.default=r.exports}}]);