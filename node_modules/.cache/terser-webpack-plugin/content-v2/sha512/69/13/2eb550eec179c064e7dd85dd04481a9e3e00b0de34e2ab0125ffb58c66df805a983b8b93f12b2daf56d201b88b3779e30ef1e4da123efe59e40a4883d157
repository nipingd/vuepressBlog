{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{546:function(t,e,s){t.exports=s.p+\"assets/img/1567322286020.6722c83a.png\"},547:function(t,e,s){t.exports=s.p+\"assets/img/1567323294510.2935c598.png\"},548:function(t,e,s){t.exports=s.p+\"assets/img/1567323325233.a9896957.png\"},549:function(t,e,s){t.exports=s.p+\"assets/img/1567324124947.ad326f04.png\"},666:function(t,e,s){\"use strict\";s.r(e);var r=[function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"浏览器是如何渲染ui的？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器是如何渲染ui的？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 浏览器是如何渲染UI的？\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ol\",[s(\"li\",[t._v(\"浏览器获取HTML文件，然后对文件进行解析，形成DOM Tree\")]),t._v(\" \"),s(\"li\",[t._v(\"与此同时，进行CSS解析，生成Style Rules\")]),t._v(\" \"),s(\"li\",[t._v(\"接着将DOM Tree与Style Rules合成为 Render Tree\")]),t._v(\" \"),s(\"li\",[t._v(\"接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标\")]),t._v(\" \"),s(\"li\",[t._v(\"随后调用GPU进行绘制（Paint），遍历Render Tree的节点，并将元素呈现出来\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:s(546),alt:\"1567322286020\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"浏览器如何解析css选择器？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器如何解析css选择器？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 浏览器如何解析css选择器？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[this._v(\"我们知道DOM Tree与Style Rules合成为 Render Tree，实际上是需要将\"),e(\"em\",[this._v(\"Style Rules\")]),this._v(\"附着到DOM Tree上，因此需要根据选择器提供的信息对DOM Tree进行遍历，才能将样式附着到对应的DOM元素上。\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-css line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-css\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token selector\"}},[t._v(\".mod-nav h3 span\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v(\"font-size\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" 16px\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:s(547),alt:\"1567323294510\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ol\",[e(\"li\",[this._v(\"从 .mod-nav 开始，遍历子节点 header 和子节点 div\")]),this._v(\" \"),e(\"li\",[this._v(\"然后各自向子节点遍历。在右侧 div 的分支中\")]),this._v(\" \"),e(\"li\",[this._v(\"最后遍历到叶子节点 a ，发现不符合规则，需要回溯到 ul 节点，再遍历下一个 li-a，一颗DOM树的节点动不动上千，这种效率很低。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ol\",[e(\"li\",[this._v(\"先找到所有的最右节点 span，对于每一个 span，向上寻找节点 h3\")]),this._v(\" \"),e(\"li\",[this._v(\"由 h3再向上寻找 class=mod-nav 的节点\")]),this._v(\" \"),e(\"li\",[this._v(\"最后找到根元素 html 则结束这个分支的遍历。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"dom-tree是如何构建的？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dom-tree是如何构建的？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" DOM Tree是如何构建的？\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"转码\")]),t._v(\": 浏览器将接收到的二进制数据按照指定编码格式转化为HTML字符串\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"生成Tokens\")]),t._v(\": 之后开始parser，浏览器会将HTML字符串解析成Tokens\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"构建Nodes\")]),t._v(\": 对Node添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"生成DOM Tree\")]),t._v(\": 通过node包含的指针确定的关系构建出DOM Tree\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:s(548),alt:\"1567323325233\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"浏览器重绘与重排的区别？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器重绘与重排的区别？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 浏览器重绘与重排的区别？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"重排: \"),e(\"strong\",[this._v(\"部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算\")]),this._v(\"，表现为重新生成布局，重新排列元素\")]),this._v(\" \"),e(\"li\",[this._v(\"重绘: \"),e(\"strong\",[this._v(\"由于节点的几何属性发生改变或者由于样式发生改变\")]),this._v(\"，例如改变元素背景色时，屏幕上的部分内容需要更新，表现为某些元素的外观被改变\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"如何触发重排和重绘？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何触发重排和重绘？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 如何触发重排和重绘？\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ul\",[s(\"li\",[t._v(\"添加、删除、更新DOM节点\")]),t._v(\" \"),s(\"li\",[t._v(\"通过display: none隐藏一个DOM节点-触发重排和重绘\")]),t._v(\" \"),s(\"li\",[t._v(\"通过visibility: hidden隐藏一个DOM节点-只触发重绘，因为没有几何变化\")]),t._v(\" \"),s(\"li\",[t._v(\"移动或者给页面中的DOM节点添加动画\")]),t._v(\" \"),s(\"li\",[t._v(\"添加一个样式表，调整样式属性\")]),t._v(\" \"),s(\"li\",[t._v(\"用户行为，例如调整窗口大小，改变字号，或者滚动。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"如何避免重绘或者重排？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何避免重绘或者重排？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 如何避免重绘或者重排？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"集中改变样式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集中改变样式\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 集中改变样式\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-js line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 判断是否是黑色系样式\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" theme \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" isDark \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'dark'\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'light'\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 根据判断来设置不同的class\")]),t._v(\"\\nele\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setAttribute\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'className'\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" theme\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"使用documentfragment\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用documentfragment\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 使用DocumentFragment\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-js line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" fragment \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" document\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"createDocumentFragment\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" node \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" document\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"createElement\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"p\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  node\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"innerHTML \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  fragment\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"appendChild\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"node\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\ndocument\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"body\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"appendChild\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"fragment\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"提升为合成层\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#提升为合成层\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 提升为合成层\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"合成层的位图，会交由 GPU 合成，比 CPU 处理要快\")]),this._v(\" \"),e(\"li\",[this._v(\"当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层\")]),this._v(\" \"),e(\"li\",[this._v(\"对于 transform 和 opacity 效果，不会触发 layout 和 paint\")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-css line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-css\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token selector\"}},[t._v(\"#target\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v(\"will-change\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" transform\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"前端如何实现即时通讯？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前端如何实现即时通讯？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 前端如何实现即时通讯？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"短轮询\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#短轮询\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 短轮询\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"优点：兼容性强，实现非常简单\")]),this._v(\" \"),e(\"li\",[this._v(\"缺点：延迟性高，非常消耗请求资源，影响性能\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"comet\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#comet\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" comet\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"优点：兼容性好，资源浪费较小\")]),this._v(\" \"),e(\"li\",[this._v(\"缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"优点：兼容性好，消息即时到达，不发无用请求\")]),this._v(\" \"),e(\"li\",[this._v(\"缺点：服务器维护长连接消耗资源\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"sse\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sse\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" SSE\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"优点：基于HTTP而生，因此不需要太多改造就能使用，使用方便，而websocket非常复杂，必须借助成熟的库或框架\")]),this._v(\" \"),e(\"li\",[this._v(\"缺点：基于文本传输效率没有websocket高，不是严格的双向通信，客户端向服务端发送请求无法复用之前的连接，需要重新发出独立的请求\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"websocket\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#websocket\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Websocket\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"优点：真正意义上的实时双向通信，性能好，低延迟\")]),this._v(\" \"),e(\"li\",[this._v(\"缺点：独立与http的协议，因此需要额外的项目改造，使用复杂度高，必须引入成熟的库，无法兼容低版本浏览器\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:s(549),alt:\"1567324124947\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"web-worker\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#web-worker\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Web Worker\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"blockquote\",[e(\"p\",[this._v(\"后面性能优化部分会用到，先做了解\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"service-workers\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#service-workers\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Service workers\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"blockquote\",[e(\"p\",[this._v(\"后面性能优化部分会用到，先做了解\")])])}],a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"content\"},[s(\"p\",[t._v(\"以下转载自：\"),s(\"a\",{attrs:{href:\"https://www.cxymsg.com/guide/browser.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://www.cxymsg.com/guide/browser.html\"),s(\"OutboundLink\")],1)]),t._v(\" \"),t._m(0),t._v(\" \"),t._m(1),t._v(\" \"),t._m(2),t._v(\" \"),t._m(3),t._v(\" \"),s(\"p\",[t._v(\"浏览器会『从右往左』解析CSS选择器。\")]),t._v(\" \"),t._m(4),t._v(\" \"),s(\"p\",[t._v(\"以下这段css为例\")]),t._v(\" \"),t._m(5),s(\"p\",[t._v(\"我们对应的DOM Tree 如下\")]),t._v(\" \"),t._m(6),t._v(\" \"),s(\"p\",[t._v(\"若从左向右的匹配，过程是：\")]),t._v(\" \"),t._m(7),t._v(\" \"),s(\"p\",[t._v(\"如果从右至左的匹配：\")]),t._v(\" \"),t._m(8),t._v(\" \"),s(\"p\",[t._v(\"后者匹配性能更好，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点）；而从左向右的匹配规则的性能都浪费在了失败的查找上面。\")]),t._v(\" \"),t._m(9),t._v(\" \"),t._m(10),t._v(\" \"),t._m(11),t._v(\" \"),t._m(12),t._v(\" \"),t._m(13),t._v(\" \"),s(\"p\",[t._v(\"单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分\")]),t._v(\" \"),s(\"p\",[t._v(\"重排和重绘代价是高昂的，它们会破坏用户体验，并且让UI展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。\")]),t._v(\" \"),t._m(14),t._v(\" \"),t._m(15),t._v(\" \"),s(\"p\",[t._v(\"任何改变用来构建渲染树的信息都会导致一次重排或重绘：\")]),t._v(\" \"),t._m(16),t._v(\" \"),t._m(17),t._v(\" \"),t._m(18),t._v(\" \"),s(\"p\",[t._v(\"我们往往通过改变class的方式来集中改变样式\")]),t._v(\" \"),t._m(19),t._m(20),t._v(\" \"),s(\"p\",[t._v(\"我们可以通过createDocumentFragment创建一个游离于DOM树之外的节点，然后在此节点上批量操作，最后插入DOM树中，因此只触发一次重排\")]),t._v(\" \"),t._m(21),t._m(22),t._v(\" \"),s(\"p\",[t._v(\"将元素提升为合成层有以下优点：\")]),t._v(\" \"),t._m(23),t._v(\" \"),s(\"p\",[t._v(\"提升合成层的最好方式是使用 CSS 的 will-change 属性：\")]),t._v(\" \"),t._m(24),s(\"blockquote\",[s(\"p\",[t._v(\"关于合成层的详解请移步\"),s(\"a\",{attrs:{href:\"https://fed.taobao.org/blog/2016/04/26/performance-composite/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"无线性能优化：Composite\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),t._m(25),t._v(\" \"),t._m(26),t._v(\" \"),s(\"p\",[t._v(\"短轮询的原理很简单，每隔一段时间客户端就发出一个请求，去获取服务器最新的数据，一定程度上模拟实现了即时通讯。\")]),t._v(\" \"),t._m(27),t._v(\" \"),t._m(28),t._v(\" \"),s(\"p\",[t._v(\"comet有两种主要实现手段，一种是基于 AJAX 的长轮询（long-polling）方式，另一种是基于 Iframe 及 htmlfile 的流（streaming）方式，通常被叫做长连接。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"具体两种手段的操作方法请移步\"),s(\"a\",{attrs:{href:\"http://www.52im.net/thread-334-1-1.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Comet技术详解：基于HTTP长连接的Web端实时通信技术\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"p\",[t._v(\"长轮询优缺点：\")]),t._v(\" \"),t._m(29),t._v(\" \"),s(\"p\",[t._v(\"长连接优缺点：\")]),t._v(\" \"),t._m(30),t._v(\" \"),t._m(31),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"使用指南请看\"),s(\"a\",{attrs:{href:\"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Server-Sent Events 教程\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"p\",[t._v(\"😋**SSE（Server-Sent Event，服务端推送事件）**是一种允许服务端向客户端推送新数据的HTML5技术。\")]),t._v(\" \"),t._m(32),t._v(\" \"),t._m(33),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"使用指南请看\"),s(\"a\",{attrs:{href:\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"WebSocket 教程\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"p\",[t._v(\"Websocket是一个全新的、独立的协议，基于TCP协议，与http协议兼容、却不会融入http协议，仅仅作为html5的一部分，其作用就是在服务器和客户端之间建立实时的双向通信。\")]),t._v(\" \"),t._m(34),t._v(\" \"),t._m(35),t._v(\" \"),t._m(36),t._v(\" \"),t._m(37),t._v(\" \"),s(\"p\",[t._v(\"Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"a\",{attrs:{href:\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Web Worker教程\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),t._m(38),t._v(\" \"),t._m(39),t._v(\" \"),s(\"p\",[t._v(\"Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理，创建有效的离线体验。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Service workers教程\"),s(\"OutboundLink\")],1)])])])},r,!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}