{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{394:function(t,s,a){t.exports=a.p+\"assets/img/1558707165569.570210dc.png\"},395:function(t,s,a){t.exports=a.p+\"assets/img/1558707216129.244c8b42.png\"},396:function(t,s,a){t.exports=a.p+\"assets/img/1558708073388.d4b4258d.png\"},397:function(t,s,a){t.exports=a.p+\"assets/img/1558750802679.53409661.png\"},398:function(t,s,a){t.exports=a.p+\"assets/img/1558750880141.f410b70e.png\"},399:function(t,s,a){t.exports=a.p+\"assets/img/1558750949951.f8f8b9b5.png\"},400:function(t,s,a){t.exports=a.p+\"assets/img/1558709047135.c6acd790.png\"},401:function(t,s,a){t.exports=a.p+\"assets/img/1564999728388.f9ad878d.png\"},445:function(t,s,a){\"use strict\";a.r(s);var n=[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"div\",{staticClass:\"content\"},[n(\"p\",[n(\"strong\",[t._v(\"互联网有一项著名的8秒原则。用户在访问Web网页时，如果时间超过8秒就会感到不耐烦，如果加载需要太长时间，他们就会放弃访问\")]),t._v(\"。大部分用户希望网页能在2秒之内就完成加载。事实上，加载时间每多1秒，你就会流失7%的用户。8秒并不是准确的8秒钟，只是向网站开发者表明了加载时间的重要性。那我们如何优化页面性能，提高页面加载速度呢？这是本文主要要探讨的问题，然而性能优化是个综合性问题，没有标准答案，想要面面俱到罗列出来，并非易事。本文只关注一些核心要点，以下是我总结性能优化常见的办法：\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"一、资源压缩与合并，减少http请求\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、资源压缩与合并，减少http请求\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 一、资源压缩与合并，减少http请求\")]),t._v(\" \"),n(\"p\",[t._v(\"主要包括这些方面：html压缩、css 压缩、js的压缩和混乱和文件合并。 资源压缩可以从文件中去掉多余的字符，比如回车、空格。你在编辑器中写代码的时候，会使用缩进和注释，这些方法无疑会让你的代码简洁而且易读，但它们也会在文档中添加多余的字节。\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[n(\"strong\",[t._v(\"html压缩、css压缩\")]),t._v(\"🔥\")]),t._v(\" \"),n(\"li\",[n(\"strong\",[t._v(\"使用精灵图(css sprites)来合并图片\")]),t._v(\"🔥\")]),t._v(\" \"),n(\"li\",[n(\"strong\",[t._v(\"图片较多的页面也可以使用 lazyLoad(懒加载) 等技术进行优化。\")]),t._v(\"🔥\")]),t._v(\" \"),n(\"li\",[n(\"strong\",[t._v(\"js的压缩和混乱🔥\")])]),t._v(\" \"),n(\"li\",[n(\"strong\",[t._v(\"文件合并🔥\")])])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"_1-html压缩\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-html压缩\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 1.html压缩\")]),t._v(\" \"),n(\"p\",[t._v(\"html代码压缩就是压缩这些在文本文件中有意义，但是在HTML中不显示的字符，包括空格，制表符，换行符等，还有一些其他意义的字符，如HTML注释也可以被压缩。\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"如何进行html压缩：\")])]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"使用在线网站进行压缩(开发过程中一般不用)\")]),t._v(\" \"),n(\"li\",[t._v(\"nodejs 提供了html-minifier工具\")]),t._v(\" \"),n(\"li\",[t._v(\"后端模板引擎渲染压缩\")])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"_2-css代码压缩\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-css代码压缩\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 2.css代码压缩\")]),t._v(\" \"),n(\"p\",[t._v(\"css代码压缩简单来说就是无效代码删除和css语义合并\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"如何进行css压缩：\")])]),t._v(\" \"),n(\"ol\",[n(\"li\",[n(\"p\",[t._v(\"使用在线网站进行压缩(开发过程中一般不用)\")])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"使用html-minifier工具\")])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"使用clean-css对css压缩\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(394),alt:\"1558707165569\"}})])])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"_3-js的压缩和混乱\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-js的压缩和混乱\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 3.js的压缩和混乱\")]),t._v(\" \"),n(\"p\",[t._v(\"js的压缩和混乱主要包括以下这几部分：\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"无效字符的删除\")]),t._v(\" \"),n(\"li\",[t._v(\"剔除注释\")]),t._v(\" \"),n(\"li\",[t._v(\"代码语义的缩减和优化\")]),t._v(\" \"),n(\"li\",[t._v(\"代码保护(代码逻辑变得混乱，降低代码的可读性，这点很重要)\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"如何进行js的压缩和混乱\")])]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"使用在线网站进行压缩(开发过程中一般不用)\")]),t._v(\" \"),n(\"li\",[t._v(\"使用html-minifier工具\")]),t._v(\" \"),n(\"li\",[t._v(\"使用uglifyjs2对js进行压缩\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"其实css压缩与js的压缩和混乱比html压缩收益要大得多，同时css代码和js代码比html代码多得多，通过css压缩和js压缩带来流量的减少，会非常明显。所以对大公司来说，html压缩可有可无，但css压缩与js的压缩和混乱必须要有！\")])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"_4-文件合并\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-文件合并\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 4.文件合并\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(395),alt:\"1558707216129\"}})]),t._v(\" \"),n(\"p\",[t._v(\"从上图可以看出不合并请求有以下缺点：\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"文件与文件之间有插入的上行请求，增加了N-1个网络延迟\")]),t._v(\" \"),n(\"li\",[t._v(\"受丢包问题影响更严重\")]),t._v(\" \"),n(\"li\",[t._v(\"keep-alive方式可能会出现状况，经过代理服务器时可能会被断开，也就是说不能一直保持keep-alive的状态\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"压缩合并css和js可以减少网站http请求的次数，但合并文件可能会带来问题:首屏渲染和缓存失效问题\")]),t._v(\"。那该如何处理这问题呢？----公共库合并和不同页面的合并。\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"如何进行文件合并\")])]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"使用在线网站进行文件合并\")]),t._v(\" \"),n(\"li\",[t._v(\"使用nodejs实现文件合并(gulp、fis3)\")])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"二、非核心代码异步加载\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、非核心代码异步加载\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 二、非核心代码异步加载\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"_1、异步加载的方式\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、异步加载的方式\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 1、异步加载的方式\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"异步加载的三种方式——async和defer、动态脚本创建\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"①  defer方式\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"兼容所有浏览器\")]),t._v(\" \"),n(\"li\",[t._v(\"defer属性规定是否对脚本执行进行延迟，直到页面加载为止\")]),t._v(\" \"),n(\"li\",[t._v(\"如果是多个脚本，该方法可以确保所有设置了defer属性的脚本按顺序执行\")]),t._v(\" \"),n(\"li\",[t._v(\"如果脚本不会改变文档的内容，可将defer属性加入到script标签中，以便加快处理文档的速度\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"② async方式\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"async属性是HTML5新增属性，需要Chrome、FireFox、IE9+浏览器支持\")]),t._v(\" \"),n(\"li\",[t._v(\"async属性规定一旦脚本可用，则会异步执行\")]),t._v(\" \"),n(\"li\",[t._v(\"async属性仅适用于外部脚本\")]),t._v(\" \"),n(\"li\",[t._v(\"如果是多个脚本，该方法不能保证脚本按顺序执行\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-html line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"script\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"type\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"text/javascript\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"src\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"xxx.js\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"async\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"async\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),n(\"span\",{pre:!0,attrs:{class:\"token script\"}}),n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"script\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[t._v(\"③动态创建script标签\")]),t._v(\"在还没定义defer和async前，异步加载的方式是动态创建script，通过window.onload方法确保页面加载完毕再将script标签插入到DOM中,具体代码如下：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-js line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"addScriptTag\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"src\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"      \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" script \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" document\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"createElement\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'script'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"      \\n    script\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setAttribute\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"type\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"text/javascript\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"      \\n    script\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"src \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" src\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"      \\n    document\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"body\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"appendChild\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"script\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\nwindow\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function-variable function\"}},[t._v(\"onload\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"      \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"addScriptTag\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"js/index.js\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n\")])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),n(\"br\")])]),n(\"h4\",{attrs:{id:\"_2、异步加载的区别\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、异步加载的区别\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 2、异步加载的区别\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"1)defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"2)async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关\")])]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(396),alt:\"1558708073388\"}})]),t._v(\" \"),n(\"h2\",{attrs:{id:\"三、利用浏览器缓存\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、利用浏览器缓存\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 三、利用浏览器缓存\")]),t._v(\" \"),n(\"p\",[t._v(\"对于web应用来说，缓存是提升页面性能同时减少服务器压力的利器。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"浏览器缓存类型\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器缓存类型\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 浏览器缓存类型\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"1.强缓存：不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的network选项中可以看到该请求返回200的状态码，并且size显示from disk cache或from memory cache；\")])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"相关的header\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#相关的header\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 相关的header:\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"Expires\")]),t._v(\" ：response header里的过期时间，浏览器再次加载资源时，如果在这个过期时间内，则命中强缓存。它的值为一个绝对时间的GMT格式的时间字符串， 比如Expires:Thu,21 Jan 2018 23:39:02 GMT\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"缺点：\")])]),t._v(\" \"),n(\"p\",[t._v(\"由于\"),n(\"code\",[t._v(\"Expires\")]),t._v(\"是服务器返回的一个\"),n(\"strong\",[t._v(\"绝对时间\")]),t._v(\"，存在的问题是：服务器的事件和客户端的事件可能不一致。在服务器时间与客户端时间相差较大时，缓存管理容易出现问题，比如随意修改客户端时间，就能影响缓存命中的结果。所以，在http1.1中，提出了一个新的response header，就是Cache-Control。\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"Cache-Control\")]),t._v(\" ：这是一个\"),n(\"strong\",[t._v(\"相对时间\")]),t._v(\"，在配置缓存的时候，以秒为单位，用数值表示。当值设为max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。比如Cache-Control:max-age=300，\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"简单概括\")]),t._v(\"：其实这两者差别不大，区别就在于 Expires 是http1.0的产物，Cache-Control是http1.1的产物，\"),n(\"strong\",[t._v(\"两者同时存在的话，Cache-Control优先级高于Expires\")]),t._v(\"；在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容，\"),n(\"strong\",[t._v(\"那我们如何获知服务器端内容较客户端是否已经发生了更新呢\")]),t._v(\"？此时我们需要协商缓存策略。\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"2.协商缓存：向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览器从缓存中读取资源；另外协商缓存需要与cache-control共同使用。\")])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"相关的header-2\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#相关的header-2\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 相关的header:\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"①Last-Modified和If-Modified-Since\")]),t._v(\"：当第一次请求资源时，服务器将资源传递给客户端时，会将资源最后更改的时间以“Last-Modified: GMT”的形式加在实体首部上一起返回给客户端(\"),n(\"strong\",[t._v(\"表示这该资源在服务器上的最后修改时间\")]),t._v(\")。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-http line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-http\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Last-Modified:\")]),t._v(\" Fri, 22 Jul 2016 01:47:00 GMT\\n\")])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\")])]),n(\"p\",[t._v(\"客户端会为资源标记上该信息，下次再次请求时，会把该信息附带在请求报文中一并带给服务器去做检查，若传递的时间值与服务器上该资源最终修改时间是一致的，则说明该资源没有被修改过，\"),n(\"strong\",[t._v(\"直接返回304状态码，内容为空\")]),t._v(\"，这样就节省了传输数据量 。如果两个时间不一致，则\"),n(\"strong\",[t._v(\"服务器会发回该资源并返回200状态码，和第一次请求时类似\")]),t._v(\"。这样保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。一个304响应比一个静态资源通常小得多，这样就节省了网络带宽。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(397),alt:\"1558750802679\"}})]),t._v(\" \"),n(\"p\",[t._v(\"但last-modified 存在一些缺点：\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"Ⅰ.某些服务端不能获取精确的修改时间\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"Ⅱ.文件修改时间改了，但文件内容却没有变\")])]),t._v(\" \"),n(\"p\",[t._v(\"既然根据文件修改时间来决定是否缓存尚有不足，能否可以直接根据文件内容是否修改来决定缓存策略？----ETag和If-None-Match\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"②ETag和If-None-Match\")]),t._v(\"：Etag是上一次加载资源时，服务器返回的response header，是对该资源的一种唯一标识，只要资源有变化，Etag就会重新生成。浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的Etag值放到request header里的If-None-Match里，服务器只需要比较客户端传来的If-None-Match跟自己服务器上该资源的ETag是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现ETag匹配不上，那么直接以常规GET 200回包形式将新的资源（当然也包括了新的ETag）发给客户端；如果ETag是一致的，则直接返回304知会客户端直接使用本地缓存即可。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(398),alt:\"1558750880141\"}})]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"两者之间对比\")]),t._v(\"：\"),n(\"strong\",[t._v(\"首先在精确度上，Etag要优于Last-Modified\")]),t._v(\"。Last-Modified的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的Last-Modified其实并没有体现出来修改，但是Etag每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也有可能不一致。\"),n(\"strong\",[t._v(\"第二在性能上，Etag要逊于Last-Modified\")]),t._v(\"，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。\"),n(\"strong\",[t._v(\"第三在优先级上，服务器校验优先考虑Etag\")])]),t._v(\" \"),n(\"h4\",{attrs:{id:\"缓存的机制\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存的机制\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 缓存的机制\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存\")]),t._v(\"。主要过程如下：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(399),alt:\"1558750949951\"}})]),t._v(\" \"),n(\"h4\",{attrs:{id:\"用户行为对浏览器缓存的影响\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用户行为对浏览器缓存的影响\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 用户行为对浏览器缓存的影响\")]),t._v(\" \"),n(\"p\",[t._v(\"1.地址栏访问，链接跳转是正常用户行为，将会触发浏览器缓存机制；\")]),t._v(\" \"),n(\"p\",[t._v(\"2.F5刷新，浏览器会设置max-age=0，跳过强缓存判断，会进行协商缓存判断；\")]),t._v(\" \"),n(\"p\",[t._v(\"3.ctrl+F5刷新，跳过强缓存和协商缓存，直接从服务器拉取资源。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"四、使用cdn\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、使用cdn\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 四、使用CDN\")]),t._v(\" \"),n(\"p\",[t._v(\"大型Web应用对速度的追求并没有止步于仅仅利用浏览器缓存，因为浏览器缓存始终只是为了提升二次访问的速度，对于首次访问的加速，我们需要从网络层面进行优化，最常见的手段就是CDN（Content Delivery Network，\"),n(\"strong\",[t._v(\"内容分发网络\")]),t._v(\"）加速。\"),n(\"strong\",[t._v(\"通过将静态资源(例如javascript，css，图片等等）缓存到离用户很近的相同网络运营商的CDN节点上，不但能提升用户的访问速度，还能节省服务器的带宽消耗，降低负载。\")])]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(400),alt:\"1558709047135\"}})]),t._v(\" \"),n(\"h4\",{attrs:{id:\"cdn是怎么做到加速的呢？\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cdn是怎么做到加速的呢？\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" CDN是怎么做到加速的呢？\")]),t._v(\" \"),n(\"p\",[t._v(\"其实这是CDN服务商在全国各个省份部署计算节点，CDN加速将网站的内容缓存在网络边缘,不同地区的用户就会访问到离自己最近的相同网络线路上的CDN节点，当请求达到CDN节点后，节点会判断自己的内容缓存是否有效，如果有效，则立即响应缓存内容给用户，从而加快响应速度。如果CDN节点的缓存失效，它会根据服务配置去我们的内容源服务器获取最新的资源响应给用户，并将内容缓存下来以便响应给后续访问的用户。\"),n(\"strong\",[t._v(\"因此，一个地区内只要有一个用户先加载资源，在CDN中建立了缓存，该地区的其他后续用户都能因此而受益\")]),t._v(\"。\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"CDN=更智能的镜像+缓存+流量导流\")]),t._v(\"。\")]),t._v(\" \"),n(\"p\",[t._v(\"如果某个用户想要访问优酷的视频点播内容，那么：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:a(401),alt:\"1564999728388\"}})]),t._v(\" \"),n(\"p\",[t._v(\"具体步骤：\")]),t._v(\" \"),n(\"p\",[t._v(\"①、当用户点击APP上的内容，APP会根据URL地址去\"),n(\"strong\",[t._v(\"本地DNS\")]),t._v(\"（域名解析系统）寻求IP地址解析。\")]),t._v(\" \"),n(\"p\",[t._v(\"②、本地DNS系统会将域名的解析权交给\"),n(\"strong\",[t._v(\"CDN专用DNS服务器\")]),t._v(\"。\")]),t._v(\" \"),n(\"p\",[t._v(\"③、CDN专用DNS服务器，将CDN的全局负载均衡设备IP地址返回用户。\")]),t._v(\" \"),n(\"p\",[t._v(\"④、用户向\"),n(\"strong\",[t._v(\"CDN的负载均衡设备\")]),t._v(\"发起内容URL访问请求。\")]),t._v(\" \"),n(\"p\",[t._v(\"⑤、CDN负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的\"),n(\"strong\",[t._v(\"缓存服务器\")]),t._v(\"。\")]),t._v(\" \"),n(\"p\",[t._v(\"⑥、负载均衡设备告诉用户这台缓存服务器的IP地址，让用户向所选择的缓存服务器发起请求。\")]),t._v(\" \"),n(\"p\",[t._v(\"⑦、用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。\")]),t._v(\" \"),n(\"p\",[t._v(\"⑧、如果这台缓存服务器上并没有用户想要的内容，那么这台缓存服务器就要网站的\"),n(\"strong\",[t._v(\"源服务器\")]),t._v(\"请求内容。\")]),t._v(\" \"),n(\"p\",[t._v(\"⑨、源服务器返回内容给缓存服务器，缓存服务器发给用户，并根据用户自定义的缓存策略，判断要不要把内容缓存到缓存服务器上。\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"采用CDN技术，最大的好处，就是加速了网站的访问——用户与内容之间的物理距离缩短，用户的等待时间也得以缩短。\")]),t._v(\"(来自公众号：鲜枣课堂，作者 小枣君)\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"五、dns预解析（dns-prefetch）\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、dns预解析（dns-prefetch）\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 五、DNS预解析（dns-prefetch）\")]),t._v(\" \"),n(\"p\",[t._v(\"**资源预加载是另一个性能优化技术，我们可以使用该技术来预先告知浏览器某些资源可能在将来会被使用到。**通过 DNS 预解析来告诉浏览器未来我们可能从某个特定的 URL 获取资源，当浏览器真正使用到该域中的某个资源时就可以尽快地完成 DNS 解析。例如，我们将来可从 example.com 获取图片或音频资源，那么可以在文档顶部的 标签中加入以下内容：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-html line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"link\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"rel\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"dns-prefetch\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"href\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"//example.com\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\")])]),n(\"p\",[t._v(\"当我们从该 URL 请求一个资源时，就不再需要等待 DNS 的解析过程。该技术对使用第三方资源特别有用。通过简单的一行代码就可以告知那些兼容的浏览器进行 DNS 预解析，这意味着当浏览器真正请求该域中的某个资源时，DNS 的解析就已经完成了,从而节省了宝贵的时间。 另外需要注意的是，\"),n(\"strong\",[t._v(\"浏览器会对a标签的href自动启用DNS Prefetching，所以a标签里包含的域名不需要在head中手动设置link。但是在HTTPS下不起作用，需要meta来强制开启功能\")]),t._v(\"。这个限制的原因是防止窃听者根据DNS Prefetching推断显示在HTTPS页面中超链接的主机名。下面这句话作用是强制打开a标签域名解析\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-html line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"meta\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"http-equiv\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"x-dns-prefetch-control\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"content\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"on\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"六、js代码惰性载入\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六、js代码惰性载入\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 六、js代码惰性载入\")]),t._v(\" \"),n(\"p\",[t._v(\"来自：公众号(前端大全)\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"你有哪些性能优化的方法？\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#你有哪些性能优化的方法？\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" \"),n(\"strong\",[t._v(\"你有哪些性能优化的方法？\")])]),t._v(\" \"),n(\"p\",[t._v(\"（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\")]),t._v(\" \"),n(\"p\",[t._v(\"（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\")]),t._v(\" \"),n(\"p\",[t._v(\"（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\")]),t._v(\" \"),n(\"p\",[t._v(\"（4） 当需要设置的样式很多时设置className而不是直接操作style。\")]),t._v(\" \"),n(\"p\",[t._v(\"（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\")]),t._v(\" \"),n(\"p\",[t._v(\"（6） 避免使用CSS Expression（css表达式)又称Dymic properties(动态属性)。\")]),t._v(\" \"),n(\"p\",[t._v(\"（7） 图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。\")]),t._v(\" \"),n(\"p\",[t._v(\"（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。\")]),t._v(\" \"),n(\"p\",[t._v(\"(9)\\tjs代码惰性载入\")])])}],r=a(0),e=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}