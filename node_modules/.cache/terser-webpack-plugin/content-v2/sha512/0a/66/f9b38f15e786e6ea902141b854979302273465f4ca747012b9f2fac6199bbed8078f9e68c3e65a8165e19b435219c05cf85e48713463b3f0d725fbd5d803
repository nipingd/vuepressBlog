{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{301:function(t,s,e){t.exports=e.p+\"assets/img/1558753972647.fef0505e.png\"},302:function(t,s,e){t.exports=e.p+\"assets/img/1558765877970.d8b889a6.png\"},303:function(t,s,e){t.exports=e.p+\"assets/img/1558766454506.ce3f4385.png\"},304:function(t,s,e){t.exports=e.p+\"assets/img/1558766749394.a5fa248c.png\"},305:function(t,s,e){t.exports=e.p+\"assets/img/1558767501300.8f9ccd06.png\"},306:function(t,s,e){t.exports=e.p+\"assets/img/1558768826942.5ea29e9e.png\"},307:function(t,s,e){t.exports=e.p+\"assets/img/1558771726050.13241f6c.png\"},308:function(t,s,e){t.exports=e.p+\"assets/img/1558773386968.8729ec9e.png\"},309:function(t,s,e){t.exports=e.p+\"assets/img/1558773401052.f9ddca4d.png\"},310:function(t,s,e){t.exports=e.p+\"assets/img/1558773414485.9010b1f8.png\"},396:function(t,s,e){\"use strict\";e.r(s);var r=[function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"五层因特网协议栈\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五层因特网协议栈\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 五层因特网协议栈\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"一、应用层\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、应用层\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 一、应用层\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"p\",[t._v(\"应用层( application-layer ）的任务是通过应用进程间的交互来完成特定网络应用。\"),e(\"strong\",[t._v(\"应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则\")]),t._v(\"。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 \"),e(\"strong\",[t._v(\"DNS\")]),t._v(\"，支持万维网应用的 \"),e(\"strong\",[t._v(\"HTTP 协议\")]),t._v(\"，支持电子邮件的 \"),e(\"strong\",[t._v(\"SMTP 协议\")]),t._v(\"、支持文件传输的\"),e(\"strong\",[t._v(\"FTP协议\")]),t._v(\"等等。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"~~\")]),this._v(\" \"),s(\"p\",[this._v(\"我们把\"),s(\"strong\",[this._v(\"应用层交互的数据单元称为报文\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"域名系统\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#域名系统\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 域名系统\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"域名系统( Domain Name System )是因特网的一项\"),s(\"strong\",[this._v(\"核心服务\")]),this._v(\"，它作为可以将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"http-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-协议\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" http 协议\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"超文本传输协议\")]),this._v(\"（ HyperText Transfer Protocol ）是互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"二、传输层-报文\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、传输层-报文\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 二、传输层(报文)\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"传输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的\"),s(\"strong\",[this._v(\"数据传输服务\")]),this._v(\"。\"),s(\"strong\",[this._v(\"应用进程利用该服务传送应用层报文。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"传输层常用的两种协议\")]),this._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[this._v(\"传输控制协议-TCP\")]),this._v(\"：提供面向连接的，可靠的数据传输服务。\")]),this._v(\" \"),s(\"li\",[s(\"strong\",[this._v(\"用户数据协议-UDP\")]),this._v(\"：提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"tcp（transmisson-control-protocol）\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp（transmisson-control-protocol）\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" TCP（Transmisson Control Protocol）\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"ol\",[e(\"li\",[t._v(\"TCP 是面向连接的（需要先建立连接）；\")]),t._v(\" \"),e(\"li\",[t._v(\"每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是一对一；\")]),t._v(\" \"),e(\"li\",[t._v(\"TCP提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；\")]),t._v(\" \"),e(\"li\",[t._v(\"TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；\")]),t._v(\" \"),e(\"li\",[t._v(\"面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"udp（user-datagram-protocol）\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#udp（user-datagram-protocol）\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" UDP（User Datagram Protocol）\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"ol\",[e(\"li\",[e(\"p\",[t._v(\"UDP 是无连接的；\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"UDP 是尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态；\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"UDP 是面向报文的；\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如直播，实时视频会议等）；\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"UDP 支持一对一、一对多、多对一和多对多的交互通信；\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短。\")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"div\",{staticClass:\"tip custom-block\"},[e(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"~~\")]),t._v(\" \"),e(\"p\",[t._v(\"1.单工数据传输只支持数据在一个方向上传输\")]),t._v(\" \"),e(\"p\",[t._v(\"2.半双工数据传输允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；\")]),t._v(\" \"),e(\"p\",[t._v(\"3.全双工数据通信允许数据同时在两个方向上传输，因此，\"),e(\"strong\",[t._v(\"全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"三、网络层-分组\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、网络层-分组\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 三、网络层(分组)\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"网络层的任务就是选择合适的网间路由和交换结点，确保计算机通信的数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于\"),s(\"strong\",[this._v(\"网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称数据报。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"~~\")]),this._v(\" \"),s(\"p\",[this._v(\"互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Prococol）和许多路由选择协议，因此互联网的网络层也叫做网际层或 IP 层。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"四、数据链路层-帧\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、数据链路层-帧\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 四、数据链路层(帧)\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。\\n在两个相邻节点之间传送数据时，数据链路层将网络层接下来的 IP 数据报组装成\"),s(\"strong\",[this._v(\"帧\")]),this._v(\"，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"~~\")]),this._v(\" \"),s(\"p\",[this._v(\"在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"五、物理层-比特\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、物理层-比特\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 五、物理层(比特)\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"在物理层上所传送的数据单位是\"),s(\"strong\",[this._v(\"比特\")]),this._v(\"。 物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。 在互联网使用的各种协议中最重要和最著名的就是 TCP/IP 两个协议。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"同-osi-七层协议模型、tcp-ip-四层模型的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同-osi-七层协议模型、tcp-ip-四层模型的区别\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 同 OSI 七层协议模型、TCP/IP 四层模型的区别\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ol\",[s(\"li\",[this._v(\"OSI 七层模型\\nOSI七层协议模型主要是：\\n应用层（Application）、表示层（Presentation）、会话层（Session）、传输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）。\")]),this._v(\" \"),s(\"li\",[this._v(\"TCP/IP四层模型\\nTCP/IP是一个四层的体系结构，主要包括：\\n应用层、传输层、网络层和链路层。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"各层对应\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#各层对应\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 各层对应\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(301),alt:\"1558753972647\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"http-与-https-的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-与-https-的区别\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" HTTP 与 HTTPS 的区别\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"table\",[e(\"thead\",[e(\"tr\",[e(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"区别\")]),t._v(\" \"),e(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"HTTP\")]),t._v(\" \"),e(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"HTTPS\")])])]),t._v(\" \"),e(\"tbody\",[e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"协议\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"运行在 TCP 之上，明文传输，\"),e(\"strong\",[t._v(\"客户端与服务器端都无法验证对方的身份\")])]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"身披 SSL( Secure Socket Layer 安全套接层 )外壳的 HTTP，运行于 SSL 上，SSL 运行于 TCP 之上， \"),e(\"strong\",[t._v(\"是添加了加密和认证机制的 HTTP\")]),t._v(\"。\")])]),t._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"端口\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[e(\"strong\",[t._v(\"80\")])]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[e(\"strong\",[t._v(\"443\")])])]),t._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"资源消耗\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"较少\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"由于加解密处理，会消耗更多的 CPU 和内存资源\")])]),t._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"开销\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"无需证书\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[e(\"strong\",[t._v(\"需要证书\")]),t._v(\"，而证书一般需要向认证机构购买\")])]),t._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"加密机制\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"无\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"共享密钥加密和公开密钥加密并用的混合加密机制\")])]),t._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"安全性\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"弱\")]),t._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"由于加密机制，安全性强\")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"对称加密与非对称加密\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对称加密与非对称加密\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 对称加密与非对称加密\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"对称密钥加密是指加密和解密使用同一个密钥的方式，\"),s(\"strong\",[this._v(\"这种方式存在的最大问题就是密钥发送问题，即如何安全地将密钥发给对方；\")]),this._v(\"\\n而非对称加密是指使用一对非对称密钥，即公钥和私钥，公钥可以随意发布，但私钥只有自己知道。发送密文的一方使用对方的公钥进行加密处理，对方接收到加密信息后，使用自己的私钥进行解密。\\n由于非对称加密的方式不需要发送用来解密的私钥，所以可以保证安全性；但是和对称加密比起来，非常的慢.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"综上：\")]),this._v(\" \"),s(\"p\",[this._v(\"我们还是用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"http2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http2\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" HTTP2\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"HTTP2 中引入了\"),s(\"strong\",[this._v(\"多路复用\")]),this._v(\"的技术，这个技术可以只通过一个 TCP 连接就可以传输所有的请求数据。多路复用可以绕过浏览器限制同一个域名下的请求数量的问题，进而提高了网页的性能。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"tcp-ip-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-协议\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" TCP/IP 协议\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"负责传输的-ip-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#负责传输的-ip-协议\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 负责传输的 IP 协议\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"区别：\")]),this._v(\" \"),s(\"p\",[this._v(\"IP 地址和 MAC 地址： 指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址，IP 地址可以和 MAC 地址进行配对。\"),s(\"strong\",[this._v(\"IP 地址可变换，但 MAC 地址基本上不会更改。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"使用 ARP(地址解析协议) 协议凭借 MAC 地址进行通信\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ol\",[s(\"li\",[this._v(\"IP 间的通信依赖 MAC 地址。\")]),this._v(\" \"),s(\"li\",[this._v(\"ARP 是一种用以解释地址的协议，根据通信方的 IP 地址就可以反查出对应方的 MAC 地址。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"tcp-协议如何保持传输的可靠性\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-协议如何保持传输的可靠性\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" TCP 协议如何保持传输的可靠性\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"TCP提供一种面向连接的、可靠的字节流服务。\")]),this._v(\" \"),s(\"strong\",[this._v(\"1. 面向连接\")]),this._v(\"\\n意味着两个使用 TCP 的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个 TCP 连接。在一个 TCP 连接中，仅有两方进行彼此通信；\\n\"),s(\"strong\",[this._v(\"2. 字节流服务\")]),this._v(\"\\n意味着两个应用程序通过 TCP 连接交换 8bit 字节构成的字节流，TCP 不在字节流中插入记录标识符。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"TCP 之所以可靠，大体上由于以下原因：\")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"数据包校验\")]),t._v(\"：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时 TCP 发送数据端超时后会重发数据；\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"对失序数据包重排序\")]),t._v(\"：既然 TCP 报文段作为 IP 数据报来传输，而 IP 数据报的到达可能会失序，因此 TCP 报文段的到达也可能会失序。TCP 将对失序数据进行重新排序，然后才交给应用层；\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"丢弃重复数据\")]),t._v(\"：对于重复数据，能够丢弃重复数据；\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"应答机制\")]),t._v(\"：当 TCP 收到发自 TCP 连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"超时重发\")]),t._v(\"：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"流量控制\")]),t._v(\"：TCP 连接的每一方都有固定大小的缓冲空间。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"tcp-ip-通信传输流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-通信传输流\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" TCP/IP 通信传输流\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(302),alt:\"1558765877970\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"tcp-三次握手和四次挥手\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-三次握手和四次挥手\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" TCP 三次握手和四次挥手\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"三次握手\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三次握手\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 三次握手\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(303),alt:\"1558766454506\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"注：\")]),this._v(\" \"),s(\"p\",[this._v('seq:\"sequance\" 序列号；\\nack:\"acknowledge\" 确认号；\\nSYN:\"synchronize\" 请求同步标志；\\nACK:\"acknowledge\" 确认标志；\\nFIN:\"Finally\" 结束标志。')])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"未连接队列\")]),this._v(\"\\n在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户端发出确认，正在等待客户端的确认包。这些条目所标识的连接在服务器处于 SYN_RECV状态，当服务器收到客户端的确认包时，删除该条目，服务器进入ESTABLISHED状态。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"~~\")]),this._v(\" \"),s(\"p\",[this._v(\"建立一个连接需要三次握手，而终止一个连接要经过四次挥手，这是由 TCP 的半关闭（half-close）造成的。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"四次挥手\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四次挥手\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 四次挥手\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(304),alt:\"1558766749394\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"第一次挥手\")]),this._v(\"：\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"第二次挥手：\")]),this._v(\"\\n服务器收到连接释放报文，发出确认报文，ACK = 1，ack = u + 1，并且带上自己的序列号 seq = v，此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"blockquote\",[s(\"p\",[this._v(\"TCP 服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。\\n客户端收到服务器的确认请求后，此时，客户端就进入 FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"第三次挥手：\")]),this._v(\"\\n服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN = 1，ack = u + 1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq = w，此时，服务器就进入了 LAST-ACK（最后确认）状态，等待客户端的确认。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"第四次挥手：\")]),this._v(\"\\n客户端收到服务器的连接释放报文后，必须发出确认，ACK = 1，ack = w + 1，而自己的序列号是 seq = u + 1，此时，客户端就进入了 TIME-WAIT（时间等待）状态。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"blockquote\",[s(\"p\",[this._v(\"注意此时 TCP 连接还没有释放，必须经过 2MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"提示\")]),this._v(\" \"),s(\"p\",[this._v(\"可以看到，\"),s(\"strong\",[this._v(\"服务器结束 TCP 连接的时间要比客户端早一些。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"四次的原因\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四次的原因\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 四次的原因\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"~~\")]),this._v(\" \"),s(\"p\",[this._v(\"由于 TCP 连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个 FIN 来终止这个方向的连接。收到一个 FIN 只意味着这一方向上没有数据流动，一个 TCP 连接在收到一个 FIN 后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"dns-域名解析\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dns-域名解析\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" DNS 域名解析\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"当你在浏览器的地址栏输入 \"),s(\"code\",[this._v(\"https://juejin.im\")]),this._v(\" 后会发生什么，大家在心中肯定是有一个大概的，这里我将 \"),s(\"strong\",[this._v(\"DNS 域名解析\")]),this._v(\" 这个步骤详细的讲一遍。在讲概念之前我先放上一张经典的图文供大家思考一分钟。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(305),alt:\"1558767501300\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"查找域名对应的-ip-地址的具体过程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查找域名对应的-ip-地址的具体过程\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 查找域名对应的 IP 地址的具体过程\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ol\",[s(\"li\",[this._v(\"浏览器搜索自己的 DNS 缓存（浏览器维护一张域名与 IP 地址的对应表）；如果没有命中，进入下一步；\")]),this._v(\" \"),s(\"li\",[this._v(\"搜索操作系统中的 DNS 缓存；如果没有命中，进入下一步；\")]),this._v(\" \"),s(\"li\",[this._v(\"搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；如果没有命中，进入下一步；\")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"div\",{staticClass:\"tip custom-block\"},[e(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"~~\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[t._v(\"操作系统将域名发送至 \"),e(\"strong\",[t._v(\"LDNS （本地区域名服务器）\")]),t._v(\"，LDNS 查询自己的 DNS 缓存（一般命中率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求：\")]),t._v(\" \"),e(\"li\",[t._v(\"LDNS向 Root Name Server（\"),e(\"strong\",[t._v(\"根域名服务器\")]),t._v(\"，如com、net、im 等的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 im 域的顶级域名服务器的地址；\")]),t._v(\" \"),e(\"li\",[t._v(\"LDNS 向 im 域的顶级域名服务器发起请求，返回 juejin.im 域名服务器地址；\")]),t._v(\" \"),e(\"li\",[t._v(\"LDNS 向 juejin.im 域名服务器发起请求，得到 juejin.im 的 IP 地址；\")]),t._v(\" \"),e(\"li\",[t._v(\"LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 \"),e(\"strong\",[t._v(\"IP 地址缓存起来\")]),t._v(\"；操作系统将 IP 地址返回给浏览器，同时自己也将 \"),e(\"strong\",[t._v(\"IP 地址缓存起来\")]),t._v(\"。\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"dns-prefetch\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dns-prefetch\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" DNS Prefetch\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ol\",[s(\"li\",[this._v(\"减少 DNS 的请求次数\")]),this._v(\" \"),s(\"li\",[this._v(\"进行 DNS 预获取\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"五类-ip-地址\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五类-ip-地址\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 五类 IP 地址\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"ol\",[e(\"li\",[t._v(\"A 类保留给政府机构\")]),t._v(\" \"),e(\"li\",[t._v(\"B 类分配给中等规模的公司\")]),t._v(\" \"),e(\"li\",[t._v(\"C 类分配给任何需要的人\")]),t._v(\" \"),e(\"li\",[t._v(\"D 类用于用于特殊用途. 又称做广播地址\")]),t._v(\" \"),e(\"li\",[t._v(\"E 类暂时保留\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"各类可容纳的地址数目不同。\")]),this._v(\" \"),s(\"p\",[this._v(\"其中A类、B类、和C类这三类地址用于 TCP/IP 节点，其它两类D类和E类被用于特殊用途。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(306),alt:\"1558768826942\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"一-a类地址\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一-a类地址\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 一. A类地址\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"第一个八位段为网络地址，其它为主机地址，第一个八位段首位一定为0；\\n范围：1.0.0.1—126.155.255.254；\\n\"),s(\"strong\",[this._v(\"私有地址和保留地址\")]),this._v(\"：\\n\"),s(\"strong\",[this._v(\"10.X.X.X是私有地址\")]),this._v(\"（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）。\\n\"),s(\"strong\",[this._v(\"127.X.X.X是保留地址，用做循环测试用的。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"二-b类地址\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-b类地址\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 二. B类地址\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"第一个八位段和第二个八位段为网络地址，其它为主机地址，第一个八位段首位一定为10；\\n范围：128.0.0.1—191.255.255.254。\\n私有地址和保留地址:\\n\"),s(\"strong\",[this._v(\"172.16.0.0—172.31.255.255是私有地址\")]),this._v(\"\\n169.254.X.X是保留地址。如果你的IP地址是自动获取IP地址，而你在网络上又没有找到可用的DHCP服务器。就会得到其中一个IP。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"三-c类地址\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三-c类地址\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 三. C类地址\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"前三个八位段为网络地址，第4个个字节为主机地址，第一个八位段首位一定为110。\\n范围：192.0.0.1—223.255.255.254。\\n私有地址：\\n\"),s(\"strong\",[this._v(\"192.168.X.X是私有地址。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"四-d类地址\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四-d类地址\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 四. D类地址\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"五-e类地址\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五-e类地址\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 五. E类地址\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"div\",{staticClass:\"tip custom-block\"},[e(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"一些特殊地址：\")]),t._v(\" \"),e(\"p\",[t._v(\"​\\t\"),e(\"strong\",[t._v(\"直接广播地址：\")]),t._v(\" A类、B类与C类IP地址中，主机号为全\"),e(\"strong\",[t._v(\"1\")]),t._v(\"(如191.1.255.255)的地址，路由器将这个分组以广播方式发送给特定网络(191.1.0.0)的所有主机。\")]),t._v(\" \"),e(\"p\",[t._v(\"​\\t\"),e(\"strong\",[t._v(\"受限广播地址：\")]),t._v(\" 32位网络号与主机号为全1的IP地址(255.255.255.255)为受限广播地址。\")]),t._v(\" \"),e(\"p\",[t._v(\"​\\t\"),e(\"strong\",[t._v(\"“这个网络上的特定主机”地址：\")]),t._v(\" 在A类、B类与C类IP地址中，如果网络号是全\"),e(\"strong\",[t._v(\"0\")]),t._v(\"，该地址是这个网络上的\"),e(\"strong\",[t._v(\"特定主机地址。\")])]),t._v(\" \"),e(\"p\",[t._v(\"​\\t\"),e(\"strong\",[t._v(\"回送地址：\")]),t._v(\" A类IP地址中127.0.0.0是回送地址，它是一个保留地址。回送地址用于网络软件测试和本地进程间通信。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"跨域的原因及处理方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#跨域的原因及处理方式\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 跨域的原因及处理方式\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"正向代理和反向代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正向代理和反向代理\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 正向代理和反向代理\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"概念\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概念\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 概念\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(307),alt:\"1558771726050\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"特点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#特点\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 特点\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"正向代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正向代理\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 正向代理\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"代理客户\")]),t._v(\";\")]),t._v(\" \"),e(\"li\",[t._v(\"隐藏真实的客户，为客户端收发请求，使真实客户端对服务器不可见;\")]),t._v(\" \"),e(\"li\",[t._v(\"一个局域网内的所有用户可能被一台服务器做了正向代理，由该台服务器负责 HTTP 请求;\")]),t._v(\" \"),e(\"li\",[t._v(\"意味着同服务器做通信的是正向代理服务器;\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"反向代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反向代理\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 反向代理\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"代理服务器\")]),t._v(\";\")]),t._v(\" \"),e(\"li\",[t._v(\"隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见;\")]),t._v(\" \"),e(\"li\",[t._v(\"负载均衡服务器，将用户的请求分发到空闲的服务器上;\")]),t._v(\" \"),e(\"li\",[t._v(\"意味着用户和负载均衡服务器直接通信，即用户解析服务器域名时得到的是负载均衡服务器的 IP ;\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"共同点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#共同点\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 共同点\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ol\",[s(\"li\",[this._v(\"都是做为服务器和客户端的中间层\")]),this._v(\" \"),s(\"li\",[this._v(\"都可以加强内网的安全性，阻止 web 攻击\")]),this._v(\" \"),s(\"li\",[this._v(\"都可以做缓存机制\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"实际应用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实际应用\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 实际应用\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"nginx-服务器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nginx-服务器\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Nginx 服务器\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"在虚拟主机的配置中配置反向代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在虚拟主机的配置中配置反向代理\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 在虚拟主机的配置中配置反向代理\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"div\",{staticClass:\"language-js line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[t._v(\"# 虚拟主机的配置\\nserver \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    listen \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8080\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"                         # 监听的端口\\n    server_name  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"192.168\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".1\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"            # 配置访问域名\\n    root  \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"data\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"toor\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"                    # 站点根目录\\n    error_page \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"502\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"404\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"page\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"404.\")]),t._v(\"html\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"   # 错误页面\\n    location \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"^\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"~\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"api\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"                        # 使用 \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"api\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" 代理 proxy_pass 的值\\n        proxy_pass http\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"192.168\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".20\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8080\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"    # 被代理的应用服务器 \"),e(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),t._v(\" 地址\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),e(\"br\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"当然反向代理也可以处理跨域问题，在 Vue 中就可以使用 \"),s(\"code\",[this._v(\"proxyTable\")]),this._v(\" 这个属性进行相关的配置来解决跨域问题带来的烦恼。配置如下：\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"div\",{staticClass:\"language-js line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\"\\nproxyTable\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'/weixin'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        target\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'http://192.168.48.11:8100/'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 接口的域名 \")]),t._v(\"\\n        secure\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"false\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"      \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 如果是 https 接口，需要配置这个参数\")]),t._v(\"\\n        changeOrigin\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 如果接口跨域，需要进行这个参数配置\")]),t._v(\"\\n        pathRewrite\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'^/weixin'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"''\")]),t._v(\"\\n        \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\"\\n\")])]),t._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),e(\"br\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"负载均衡的配置\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#负载均衡的配置\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 负载均衡的配置\")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"div\",{staticClass:\"language-js line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[t._v(\"# upstream 表示负载服务器池，定义名字为 my\\nupstream my \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    server \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"192.168\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".2\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8080\")]),t._v(\" weight\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" max_fails\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\" fail_timeout\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"30\")]),t._v(\"s\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    server \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"192.168\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".2\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".2\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8080\")]),t._v(\" weight\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" max_fails\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\" fail_timeout\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"30\")]),t._v(\"s\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    server \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"192.168\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".2\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".3\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8080\")]),t._v(\" weight\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" max_fails\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\" fail_timeout\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"30\")]),t._v(\"s\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    server \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"192.168\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".2\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\".4\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8080\")]),t._v(\" weight\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" max_fails\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\" fail_timeout\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"30\")]),t._v(\"s\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   # 即在 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"30\")]),t._v(\"s 内尝试 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\" 次失败即认为主机不可用\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),e(\"br\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"负载均衡即将 \"),s(\"strong\",[this._v(\"请求/数据\")]),this._v(\" 轮询分摊到多个服务器上执行，负载均衡的关键在于 \"),s(\"strong\",[this._v(\"均匀\")]),this._v(\"。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"也可以通过 \"),s(\"code\",[this._v(\"ip-hash\")]),this._v(\" 的方式，根据客户端 ip 地址的 hash 值将请求分配给固定的某一个服务器处理。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"另外，服务器的硬件配置可能不同，配置好的服务器可以处理更多的请求，这时可以通过 \"),s(\"code\",[this._v(\"weight\")]),this._v(\" 参数来控制。\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"cdn-带来的性能优化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cdn-带来的性能优化\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" CDN 带来的性能优化\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"CDN的全称是 Content Delivery Network，即内容分发网络。\")]),this._v(\" \"),s(\"p\",[this._v(\"CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有\"),s(\"strong\",[this._v(\"内容存储\")]),this._v(\"和\"),s(\"strong\",[this._v(\"分发技术\")]),this._v(\"。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"cdn的优势\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cdn的优势\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" CDN的优势\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ol\",[s(\"li\",[this._v(\"CDN 节点解决了跨运营商和跨地域访问的问题，访问延时大大降低；\")]),this._v(\" \"),s(\"li\",[this._v(\"大部分请求在 CDN 边缘节点完成，CDN 起到了分流作用，减轻了源站的负载。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"TIP\")]),this._v(\" \"),s(\"p\",[this._v(\"访问速度快是电商网站取胜的必要法宝之一。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"cdn-的工作模式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cdn-的工作模式\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" CDN 的工作模式\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"没有-cdn-服务器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#没有-cdn-服务器\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 没有 CDN 服务器\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h4\",{attrs:{id:\"有-cdn-服务器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#有-cdn-服务器\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 有 CDN 服务器\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"div\",{staticClass:\"tip custom-block\"},[s(\"p\",{staticClass:\"custom-block-title\"},[this._v(\"CDN 的核心点有两个:\")]),this._v(\" \"),s(\"p\",[this._v(\"一个是缓存\")]),this._v(\" \"),s(\"p\",[this._v(\"一个是回源。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"关键技术\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关键技术\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 关键技术\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ol\",[s(\"li\",[this._v(\"内容发布：它借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处；\")]),this._v(\" \"),s(\"li\",[this._v(\"内容路由：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程 POP 上均衡用户的请求，以使用户请求得到最近内容源的响应；\")]),this._v(\" \"),s(\"li\",[this._v(\"内容交换：它根据内容的可用性、服务器的可用性以及用户的背景，在POP的缓存服务器上，利用应用层交换、流分裂、重定向（ICP、WCCP）等技术，智能地平衡负载流量；\")]),this._v(\" \"),s(\"li\",[this._v(\"性能管理：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"cdn-静态资源\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cdn-静态资源\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" CDN & 静态资源\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"淘宝\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(308),alt:\"1558773386968\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"京东\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(309),alt:\"1558773401052\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"strong\",[this._v(\"掘金\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"img\",{attrs:{src:e(310),alt:\"1558773414485\"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h3\",{attrs:{id:\"cdn-cookie\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cdn-cookie\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" CDN & Cookie\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"blockquote\",[s(\"p\",[this._v(\"静态资源往往并不需要 Cookie 携带什么认证信息。把静态资源和主页面置于不同的域名下，就可以完美地避免请求中携带不必要的 Cookie。\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"http-强缓存-协商缓存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-强缓存-协商缓存\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" HTTP 强缓存&协商缓存\")])}],a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"div\",{staticClass:\"content\"},[t._m(0),t._v(\" \"),e(\"p\",[t._v(\"五层因特网协议栈这个知识点对你来说或许有点枯燥，不过当你对这个协议栈有了一个初步的了解之后，你之前的某些疑问就会很明朗。\")]),t._v(\" \"),t._m(1),t._v(\" \"),t._m(2),t._v(\" \"),t._m(3),t._v(\" \"),t._m(4),t._v(\" \"),t._m(5),t._v(\" \"),t._m(6),t._v(\" \"),t._m(7),t._v(\" \"),t._m(8),t._v(\" \"),t._m(9),t._v(\" \"),t._m(10),t._v(\" \"),t._m(11),t._v(\" \"),t._m(12),t._v(\" \"),t._m(13),t._v(\" \"),t._m(14),t._v(\" \"),t._m(15),t._v(\" \"),t._m(16),t._v(\" \"),t._m(17),t._v(\" \"),t._m(18),t._v(\" \"),t._m(19),t._v(\" \"),t._m(20),t._v(\" \"),t._m(21),t._v(\" \"),t._m(22),t._v(\" \"),t._m(23),t._v(\" \"),t._m(24),t._v(\" \"),t._m(25),t._v(\" \"),t._m(26),t._v(\" \"),e(\"p\",[t._v(\"以下一张图很好的说明了这三种协议的区别\")]),t._v(\" \"),t._m(27),t._v(\" \"),t._m(28),t._v(\" \"),t._m(29),t._v(\" \"),t._m(30),t._v(\" \"),t._m(31),t._v(\" \"),t._m(32),t._v(\" \"),t._m(33),t._v(\" \"),e(\"p\",[t._v(\"HTTP2 可以提高了网页的性能。\")]),t._v(\" \"),e(\"p\",[t._v(\"在 HTTP1 中浏览器限制了同一个域名下的请求数量（Chrome 下一般是六个），当在请求很多资源的时候，由于队头阻塞当浏览器达到最大请求数量时，剩余的资源需等待当前的六个请求完成后才能发起请求。\")]),t._v(\" \"),t._m(34),t._v(\" \"),t._m(35),t._v(\" \"),t._m(36),t._v(\" \"),e(\"p\",[t._v(\"按层次分，IP（Internet Protocol）网际协议位于网络层，IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件，其中两个重要的条件是 IP 地址和 MAC 地址（Media Access Control Address）。\")]),t._v(\" \"),t._m(37),t._v(\" \"),t._m(38),t._v(\" \"),t._m(39),t._v(\" \"),t._m(40),t._v(\" \"),t._m(41),t._v(\" \"),t._m(42),t._v(\" \"),t._m(43),t._v(\" \"),t._m(44),t._v(\" \"),e(\"p\",[t._v(\"借用图解 HTTP 一书中的图文：\")]),t._v(\" \"),t._m(45),t._v(\" \"),e(\"p\",[t._v(\"发送端在层与层之间传输数据时，每经过一层必定会加上一个该层的首部信息。反之，接收端在层与层之间传输数据时，每经过一层会把相关的首部信息去掉。\")]),t._v(\" \"),t._m(46),t._v(\" \"),e(\"p\",[t._v(\"TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的 RFC793 定义。\")]),t._v(\" \"),t._m(47),t._v(\" \"),t._m(48),t._v(\" \"),e(\"p\",[t._v(\"第一次握手：\")]),t._v(\" \"),e(\"p\",[t._v(\"建立连接时，向服务器发出连接请求报文，这是报文首部中的同部位 SYN = 1，同时选择一个初始序列号 seq = x ，客户端进程进入了 SYN-SENT （同步已发送状态）状态,等待服务器确认；\")]),t._v(\" \"),e(\"p\",[t._v(\"第二次握手：\")]),t._v(\" \"),e(\"p\",[t._v(\"服务器收到 syn 包后，如果同意连接，则发出确认报文; 确认报文 ACK = 1，SYN = 1，确认号是 ack = x + 1，同时也要为自己初始化一个序列号 seq = y，此时服务器进程进入了 SYN-RCVD（同步收到）状态；\")]),t._v(\" \"),e(\"p\",[t._v(\"第三次握手：\")]),t._v(\" \"),e(\"p\",[t._v(\"客户端收到服务器的 SYN+ACK 包，要向服务器给出确认。确认报文的 ACK = 1，ack = y + 1，自己的序列号 seq = x + 1，此时，TCP 连接建立，客户端进入 ESTABLISHED （已建立连接）状态。\")]),t._v(\" \"),e(\"p\",[t._v(\"完成三次握手，客户端与服务器开始传送数据。\")]),t._v(\" \"),t._m(49),t._v(\" \"),t._m(50),t._v(\" \"),t._m(51),t._v(\" \"),t._m(52),t._v(\" \"),t._m(53),t._v(\" \"),t._m(54),t._v(\" \"),e(\"p\",[t._v(\"客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部 FIN=1，其序列号为 seq = u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入 FIN-WAIT-1（终止等待1）状态。\")]),t._v(\" \"),t._m(55),t._v(\" \"),t._m(56),t._v(\" \"),t._m(57),t._v(\" \"),t._m(58),t._v(\" \"),t._m(59),t._v(\" \"),e(\"p\",[t._v(\"服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。\")]),t._v(\" \"),t._m(60),t._v(\" \"),t._m(61),t._v(\" \"),e(\"p\",[t._v(\"这是因为服务端的 LISTEN 状态下的 SOCKET 当收到 SYN 报文的建连请求后，它可以把 ACK 和 SYN（ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。     但关闭连接时，当收到对方的 FIN 报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你未必会马上会关闭 SOCKET ,也即你可能还需要发送一些数据给对方之后，再发送 FIN 报文给对方来表示你同意现在可以关闭连接了，所以它这里的 ACK 报文和 FIN 报文多数情况下都是分开发送的.\")]),t._v(\" \"),t._m(62),t._v(\" \"),t._m(63),t._v(\" \"),t._m(64),t._v(\" \"),t._m(65),t._v(\" \"),t._m(66),t._v(\" \"),t._m(67),t._v(\" \"),t._m(68),t._v(\" \"),t._m(69),t._v(\" \"),e(\"p\",[t._v(\"即 DNS 预获取，是前端优化的一部分。一般来说，在前端优化中与 DNS 有关的有两点：\")]),t._v(\" \"),t._m(70),t._v(\" \"),e(\"p\",[t._v(\"典型的一次 DNS 解析需要耗费 20-120  毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验。\")]),t._v(\" \"),t._m(71),t._v(\" \"),e(\"p\",[t._v(\"网络地址：用于识别主机所在的网络；\\n主机地址：用于识别该网络中的主机。\")]),t._v(\" \"),e(\"p\",[t._v(\"IP地址分为五类：\")]),t._v(\" \"),t._m(72),t._v(\" \"),t._m(73),t._v(\" \"),e(\"p\",[t._v(\"首先用一张图给大家一个初步的概念：\")]),t._v(\" \"),t._m(74),t._v(\" \"),t._m(75),t._v(\" \"),t._m(76),t._v(\" \"),t._m(77),t._v(\" \"),t._m(78),t._v(\" \"),t._m(79),t._v(\" \"),t._m(80),t._v(\" \"),t._m(81),t._v(\" \"),e(\"p\",[t._v(\"不分网络地址和主机地址，第一个八位段首位一定为1110。\\n范围：224.0.0.1—239.255.255.254\")]),t._v(\" \"),t._m(82),t._v(\" \"),e(\"p\",[t._v(\"不分网络地址和主机地址，第一个八位段首位一定为11110。\\n范围：240.0.0.1—255.255.255.254\")]),t._v(\" \"),t._m(83),t._v(\" \"),t._m(84),t._v(\" \"),e(\"p\",[t._v(\"请跳转《\"),e(\"router-link\",{attrs:{to:\"/font/浏览器网络/跨域实现.html\"}},[t._v(\"跨域实现\")]),t._v(\"》一文\")],1),t._v(\" \"),t._m(85),t._v(\" \"),t._m(86),t._v(\" \"),e(\"p\",[t._v(\"首先附上正儿八经的说明图，先有一个整体的理解。\")]),t._v(\" \"),t._m(87),t._v(\" \"),e(\"p\",[t._v(\"然后很官方的解释它们的概念：\")]),t._v(\" \"),e(\"p\",[t._v(\"正向代理（ Forward Proxy ）：是指是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容， 客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。\")]),t._v(\" \"),e(\"p\",[t._v(\"反向代理（ Reverse Proxy ）：是指以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\")]),t._v(\" \"),t._m(88),t._v(\" \"),t._m(89),t._v(\" \"),t._m(90),t._v(\" \"),t._m(91),t._v(\" \"),t._m(92),t._v(\" \"),t._m(93),t._v(\" \"),t._m(94),t._v(\" \"),t._m(95),t._v(\" \"),t._m(96),t._v(\" \"),e(\"p\",[t._v(\"Nginx 服务器的功能有很多，诸如反向代理、负载均衡、静态资源服务器等。\")]),t._v(\" \"),e(\"p\",[t._v(\"客户端本来可以直接通过 HTTP 协议访问服务器，不过我们可以在中间加上一个 Nginx 服务器，客户端请求 Nginx 服务器，Nginx 服务器请求应用服务器，然后将结果返回给客户端，此时 Nginx  服务器就是反向代理服务器。\")]),t._v(\" \"),t._m(97),t._v(\" \"),t._m(98),e(\"p\",[t._v(\"以上简单的配置就可以实现反向代理的功能。\")]),t._v(\" \"),t._m(99),t._v(\" \"),t._m(100),t._m(101),t._v(\" \"),t._m(102),t._m(103),t._v(\" \"),t._m(104),t._v(\" \"),t._m(105),t._v(\" \"),t._m(106),t._v(\" \"),t._m(107),t._v(\" \"),t._m(108),t._v(\" \"),t._m(109),t._v(\" \"),t._m(110),t._v(\" \"),t._m(111),t._v(\" \"),e(\"p\",[t._v(\"比如我们 SHEIN 主站的根服务器中国深圳，CDN 服务器在美国加州，欧洲法国，印度等三个地方（真实的细致很多）。\")]),t._v(\" \"),t._m(112),t._v(\" \"),e(\"p\",[t._v(\"那么全球 6000 万用户请求的资源都是从中国深圳的机房发出的，这样一位美国加州的用户在打开首页的延时可能足够她画一个精致的妆容了。（PS: 深圳前端团队在招前端开发，有需求的可以私信我）\")]),t._v(\" \"),t._m(113),t._v(\" \"),e(\"p\",[t._v(\"此时还是这位加州的用户想打开 SHEIN 打算购买一件晚礼服参加晚会。这次她视线还没有移到梳妆台，首页就已经打开了，然后她就开心的购物了。\")]),t._v(\" \"),e(\"p\",[t._v(\"这就是因为 CDN 服务器。\")]),t._v(\" \"),e(\"p\",[t._v(\"美国加州的 CDN 服务器，已经将根节点的资源复制过来了。并且我们有个机制，CDN 节点的资源十分钟会回源更新一次。所以在用户请求资源的时候是不会回源到深圳的根服务器请求的。这样不会出现用户在请求资源的时候，因为回源而导致的网络延时。\")]),t._v(\" \"),t._m(114),t._v(\" \"),t._m(115),t._v(\" \"),t._m(116),t._v(\" \"),e(\"p\",[t._v(\"前端往往认为 CDN 是不需要了解的知识。可是我们前端工程首先是软件工程师。多了解一些东西肯定是有益的。\")]),t._v(\" \"),t._m(117),t._v(\" \"),e(\"p\",[t._v(\"静态资源本身具有访问频率高、承接流量大的特点，因此静态资源加载速度始终是前端性能的一个非常关键的指标。CDN 是静态资源提速的重要手段。\")]),t._v(\" \"),t._m(118),t._v(\" \"),t._m(119),t._v(\" \"),t._m(120),t._v(\" \"),t._m(121),t._v(\" \"),t._m(122),t._v(\" \"),t._m(123),t._v(\" \"),e(\"p\",[t._v('我们随手打开一个网站点开一个静态资源，可以看到它都是从 CDN 服务器上请求来的。可以看出 \"静态资源走 CDN\" 是最佳实践。')]),t._v(\" \"),t._m(124),t._v(\" \"),e(\"p\",[t._v(\"Cookie 是紧跟域名的。同一个域名下的所有请求，都会携带相同的 Cookie。\")]),t._v(\" \"),e(\"p\",[t._v(\"但是如果我们只是请求一张图片，我们在请求中还要携带一个笨重的 Cookie 来回的跑，Cookie 中的信息和图片又是没有关联的，这种情况就很让人头痛了。Cookie 虽然小，但是随着请求的越来越多，这种的不必要的 Cookie 带来的开销将是无法想象的……\")]),t._v(\" \"),t._m(125),t._v(\" \"),e(\"p\",[t._v(\"看起来是一个不起眼的小细节，但带来的效用却是惊人的。电商网站静态资源的流量之庞大，如果没把这个多余的 Cookie 拿下来，不仅用户体验会大打折扣，每年因性能浪费导致的开销也会非常之高。\")]),t._v(\" \"),t._m(126),t._v(\" \"),e(\"p\",[t._v(\"请跳转《\"),e(\"router-link\",{attrs:{to:\"/font/浏览器网络/浏览器缓存.html\"}},[t._v(\"浏览器缓存\")]),t._v(\"》一文\")],1),t._v(\" \"),e(\"p\",[t._v(\"作者：小生方勤\")]),t._v(\" \"),e(\"p\",[t._v(\"链接：https://juejin.im/post/5c7a9f8c518825640d1dd503\")]),t._v(\" \"),e(\"p\",[t._v(\"来源：掘金\")])])},r,!1,null,null,null);s.default=n.exports}}]);","extractedComments":[]}